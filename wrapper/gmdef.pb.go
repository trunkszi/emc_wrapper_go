// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: gmdef.proto

package wrapper

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StrategyMode int32

const (
	StrategyMode_MODE_UNDEF    StrategyMode = 0 //未定义， 策略不会运行
	StrategyMode_MODE_LIVE     StrategyMode = 1 //实盘与仿真模式
	StrategyMode_MODE_BACKTEST StrategyMode = 2 //回测模式
)

// Enum value maps for StrategyMode.
var (
	StrategyMode_name = map[int32]string{
		0: "MODE_UNDEF",
		1: "MODE_LIVE",
		2: "MODE_BACKTEST",
	}
	StrategyMode_value = map[string]int32{
		"MODE_UNDEF":    0,
		"MODE_LIVE":     1,
		"MODE_BACKTEST": 2,
	}
)

func (x StrategyMode) Enum() *StrategyMode {
	p := new(StrategyMode)
	*p = x
	return p
}

func (x StrategyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[0].Descriptor()
}

func (StrategyMode) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[0]
}

func (x StrategyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrategyMode.Descriptor instead.
func (StrategyMode) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{0}
}

type OrderStatus int32

const (
	OrderStatus_OrderStatus_Unknown            OrderStatus = 0
	OrderStatus_OrderStatus_New                OrderStatus = 1  //已报
	OrderStatus_OrderStatus_PartiallyFilled    OrderStatus = 2  //部成
	OrderStatus_OrderStatus_Filled             OrderStatus = 3  //已成
	OrderStatus_OrderStatus_DoneForDay         OrderStatus = 4  //
	OrderStatus_OrderStatus_Canceled           OrderStatus = 5  //已撤
	OrderStatus_OrderStatus_PendingCancel      OrderStatus = 6  //待撤
	OrderStatus_OrderStatus_Stopped            OrderStatus = 7  //
	OrderStatus_OrderStatus_Rejected           OrderStatus = 8  //已拒绝
	OrderStatus_OrderStatus_Suspended          OrderStatus = 9  //挂起
	OrderStatus_OrderStatus_PendingNew         OrderStatus = 10 //待报
	OrderStatus_OrderStatus_Calculated         OrderStatus = 11 //
	OrderStatus_OrderStatus_Expired            OrderStatus = 12 //已过期
	OrderStatus_OrderStatus_AcceptedForBidding OrderStatus = 13 //
	OrderStatus_OrderStatus_PendingReplace     OrderStatus = 14 //
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0:  "OrderStatus_Unknown",
		1:  "OrderStatus_New",
		2:  "OrderStatus_PartiallyFilled",
		3:  "OrderStatus_Filled",
		4:  "OrderStatus_DoneForDay",
		5:  "OrderStatus_Canceled",
		6:  "OrderStatus_PendingCancel",
		7:  "OrderStatus_Stopped",
		8:  "OrderStatus_Rejected",
		9:  "OrderStatus_Suspended",
		10: "OrderStatus_PendingNew",
		11: "OrderStatus_Calculated",
		12: "OrderStatus_Expired",
		13: "OrderStatus_AcceptedForBidding",
		14: "OrderStatus_PendingReplace",
	}
	OrderStatus_value = map[string]int32{
		"OrderStatus_Unknown":            0,
		"OrderStatus_New":                1,
		"OrderStatus_PartiallyFilled":    2,
		"OrderStatus_Filled":             3,
		"OrderStatus_DoneForDay":         4,
		"OrderStatus_Canceled":           5,
		"OrderStatus_PendingCancel":      6,
		"OrderStatus_Stopped":            7,
		"OrderStatus_Rejected":           8,
		"OrderStatus_Suspended":          9,
		"OrderStatus_PendingNew":         10,
		"OrderStatus_Calculated":         11,
		"OrderStatus_Expired":            12,
		"OrderStatus_AcceptedForBidding": 13,
		"OrderStatus_PendingReplace":     14,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[1].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[1]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{1}
}

// 执行回报类型
type ExecType int32

const (
	ExecType_ExecType_Unknown        ExecType = 0
	ExecType_ExecType_New            ExecType = 1  //已报
	ExecType_ExecType_DoneForDay     ExecType = 4  //
	ExecType_ExecType_Canceled       ExecType = 5  //已撤销
	ExecType_ExecType_PendingCancel  ExecType = 6  //待撤销
	ExecType_ExecType_Stopped        ExecType = 7  //
	ExecType_ExecType_Rejected       ExecType = 8  //已拒绝
	ExecType_ExecType_Suspended      ExecType = 9  //挂起
	ExecType_ExecType_PendingNew     ExecType = 10 //待报
	ExecType_ExecType_Calculated     ExecType = 11 //
	ExecType_ExecType_Expired        ExecType = 12 //过期
	ExecType_ExecType_Restated       ExecType = 13 //
	ExecType_ExecType_PendingReplace ExecType = 14 //
	ExecType_ExecType_Trade          ExecType = 15 //成交
	ExecType_ExecType_TradeCorrect   ExecType = 16 //
	ExecType_ExecType_TradeCancel    ExecType = 17 //
	ExecType_ExecType_OrderStatus    ExecType = 18 //委托状态
	ExecType_ExecType_CancelRejected ExecType = 19 //撤单被拒绝
)

// Enum value maps for ExecType.
var (
	ExecType_name = map[int32]string{
		0:  "ExecType_Unknown",
		1:  "ExecType_New",
		4:  "ExecType_DoneForDay",
		5:  "ExecType_Canceled",
		6:  "ExecType_PendingCancel",
		7:  "ExecType_Stopped",
		8:  "ExecType_Rejected",
		9:  "ExecType_Suspended",
		10: "ExecType_PendingNew",
		11: "ExecType_Calculated",
		12: "ExecType_Expired",
		13: "ExecType_Restated",
		14: "ExecType_PendingReplace",
		15: "ExecType_Trade",
		16: "ExecType_TradeCorrect",
		17: "ExecType_TradeCancel",
		18: "ExecType_OrderStatus",
		19: "ExecType_CancelRejected",
	}
	ExecType_value = map[string]int32{
		"ExecType_Unknown":        0,
		"ExecType_New":            1,
		"ExecType_DoneForDay":     4,
		"ExecType_Canceled":       5,
		"ExecType_PendingCancel":  6,
		"ExecType_Stopped":        7,
		"ExecType_Rejected":       8,
		"ExecType_Suspended":      9,
		"ExecType_PendingNew":     10,
		"ExecType_Calculated":     11,
		"ExecType_Expired":        12,
		"ExecType_Restated":       13,
		"ExecType_PendingReplace": 14,
		"ExecType_Trade":          15,
		"ExecType_TradeCorrect":   16,
		"ExecType_TradeCancel":    17,
		"ExecType_OrderStatus":    18,
		"ExecType_CancelRejected": 19,
	}
)

func (x ExecType) Enum() *ExecType {
	p := new(ExecType)
	*p = x
	return p
}

func (x ExecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecType) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[2].Descriptor()
}

func (ExecType) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[2]
}

func (x ExecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecType.Descriptor instead.
func (ExecType) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{2}
}

// 委托拒绝原因
type OrderRejectReason int32

const (
	OrderRejectReason_OrderRejectReason_Unknown                      OrderRejectReason = 0   //未知原因
	OrderRejectReason_OrderRejectReason_RiskRuleCheckFailed          OrderRejectReason = 1   //不符合风控规则
	OrderRejectReason_OrderRejectReason_NoEnoughCash                 OrderRejectReason = 2   //资金不足
	OrderRejectReason_OrderRejectReason_NoEnoughPosition             OrderRejectReason = 3   //仓位不足
	OrderRejectReason_OrderRejectReason_IllegalAccountId             OrderRejectReason = 4   //非法账户ID
	OrderRejectReason_OrderRejectReason_IllegalStrategyId            OrderRejectReason = 5   //非法策略ID
	OrderRejectReason_OrderRejectReason_IllegalSymbol                OrderRejectReason = 6   //非法交易代码
	OrderRejectReason_OrderRejectReason_IllegalVolume                OrderRejectReason = 7   //非法委托量
	OrderRejectReason_OrderRejectReason_IllegalPrice                 OrderRejectReason = 8   //非法委托价
	OrderRejectReason_OrderRejectReason_AccountDisabled              OrderRejectReason = 10  //交易账号被禁止交易
	OrderRejectReason_OrderRejectReason_AccountDisconnected          OrderRejectReason = 11  //交易账号未连接
	OrderRejectReason_OrderRejectReason_AccountLoggedout             OrderRejectReason = 12  //交易账号未登录
	OrderRejectReason_OrderRejectReason_NotInTradingSession          OrderRejectReason = 13  //非交易时段
	OrderRejectReason_OrderRejectReason_OrderTypeNotSupported        OrderRejectReason = 14  //委托类型不支持
	OrderRejectReason_OrderRejectReason_Throttle                     OrderRejectReason = 15  //流控限制
	OrderRejectReason_OrderRejectReason_SymbolSusppended             OrderRejectReason = 16  //交易代码停牌
	OrderRejectReason_OrderRejectReason_Internal                     OrderRejectReason = 999 //内部错误
	OrderRejectReason_CancelOrderRejectReason_OrderFinalized         OrderRejectReason = 101 //委托已完成
	OrderRejectReason_CancelOrderRejectReason_UnknownOrder           OrderRejectReason = 102 //未知委托
	OrderRejectReason_CancelOrderRejectReason_BrokerOption           OrderRejectReason = 103 //柜台设置
	OrderRejectReason_CancelOrderRejectReason_AlreadyInPendingCancel OrderRejectReason = 104 //委托撤销中
)

// Enum value maps for OrderRejectReason.
var (
	OrderRejectReason_name = map[int32]string{
		0:   "OrderRejectReason_Unknown",
		1:   "OrderRejectReason_RiskRuleCheckFailed",
		2:   "OrderRejectReason_NoEnoughCash",
		3:   "OrderRejectReason_NoEnoughPosition",
		4:   "OrderRejectReason_IllegalAccountId",
		5:   "OrderRejectReason_IllegalStrategyId",
		6:   "OrderRejectReason_IllegalSymbol",
		7:   "OrderRejectReason_IllegalVolume",
		8:   "OrderRejectReason_IllegalPrice",
		10:  "OrderRejectReason_AccountDisabled",
		11:  "OrderRejectReason_AccountDisconnected",
		12:  "OrderRejectReason_AccountLoggedout",
		13:  "OrderRejectReason_NotInTradingSession",
		14:  "OrderRejectReason_OrderTypeNotSupported",
		15:  "OrderRejectReason_Throttle",
		16:  "OrderRejectReason_SymbolSusppended",
		999: "OrderRejectReason_Internal",
		101: "CancelOrderRejectReason_OrderFinalized",
		102: "CancelOrderRejectReason_UnknownOrder",
		103: "CancelOrderRejectReason_BrokerOption",
		104: "CancelOrderRejectReason_AlreadyInPendingCancel",
	}
	OrderRejectReason_value = map[string]int32{
		"OrderRejectReason_Unknown":                      0,
		"OrderRejectReason_RiskRuleCheckFailed":          1,
		"OrderRejectReason_NoEnoughCash":                 2,
		"OrderRejectReason_NoEnoughPosition":             3,
		"OrderRejectReason_IllegalAccountId":             4,
		"OrderRejectReason_IllegalStrategyId":            5,
		"OrderRejectReason_IllegalSymbol":                6,
		"OrderRejectReason_IllegalVolume":                7,
		"OrderRejectReason_IllegalPrice":                 8,
		"OrderRejectReason_AccountDisabled":              10,
		"OrderRejectReason_AccountDisconnected":          11,
		"OrderRejectReason_AccountLoggedout":             12,
		"OrderRejectReason_NotInTradingSession":          13,
		"OrderRejectReason_OrderTypeNotSupported":        14,
		"OrderRejectReason_Throttle":                     15,
		"OrderRejectReason_SymbolSusppended":             16,
		"OrderRejectReason_Internal":                     999,
		"CancelOrderRejectReason_OrderFinalized":         101,
		"CancelOrderRejectReason_UnknownOrder":           102,
		"CancelOrderRejectReason_BrokerOption":           103,
		"CancelOrderRejectReason_AlreadyInPendingCancel": 104,
	}
)

func (x OrderRejectReason) Enum() *OrderRejectReason {
	p := new(OrderRejectReason)
	*p = x
	return p
}

func (x OrderRejectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderRejectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[3].Descriptor()
}

func (OrderRejectReason) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[3]
}

func (x OrderRejectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderRejectReason.Descriptor instead.
func (OrderRejectReason) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{3}
}

// 委托方向
type OrderSide int32

const (
	OrderSide_OrderSide_Unknown OrderSide = 0
	OrderSide_OrderSide_Buy     OrderSide = 1 //买入
	OrderSide_OrderSide_Sell    OrderSide = 2 //卖出
)

// Enum value maps for OrderSide.
var (
	OrderSide_name = map[int32]string{
		0: "OrderSide_Unknown",
		1: "OrderSide_Buy",
		2: "OrderSide_Sell",
	}
	OrderSide_value = map[string]int32{
		"OrderSide_Unknown": 0,
		"OrderSide_Buy":     1,
		"OrderSide_Sell":    2,
	}
)

func (x OrderSide) Enum() *OrderSide {
	p := new(OrderSide)
	*p = x
	return p
}

func (x OrderSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSide) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[4].Descriptor()
}

func (OrderSide) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[4]
}

func (x OrderSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSide.Descriptor instead.
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{4}
}

// 委托类型
type OrderType int32

const (
	OrderType_OrderType_Unknown OrderType = 0
	OrderType_OrderType_Limit   OrderType = 1 //限价委托
	OrderType_OrderType_Market  OrderType = 2 //市价委托
	OrderType_OrderType_Stop    OrderType = 3 //止损止盈委托
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "OrderType_Unknown",
		1: "OrderType_Limit",
		2: "OrderType_Market",
		3: "OrderType_Stop",
	}
	OrderType_value = map[string]int32{
		"OrderType_Unknown": 0,
		"OrderType_Limit":   1,
		"OrderType_Market":  2,
		"OrderType_Stop":    3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[5].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[5]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{5}
}

// 委托时间属性
type OrderDuration int32

const (
	OrderDuration_OrderDuration_Unknown OrderDuration = 0
	OrderDuration_OrderDuration_FAK     OrderDuration = 1 //即时成交剩余撤销(fill and kill)
	OrderDuration_OrderDuration_FOK     OrderDuration = 2 //即时全额成交或撤销(fill or kill)
	OrderDuration_OrderDuration_GFD     OrderDuration = 3 //当日有效(good for day)
	OrderDuration_OrderDuration_GFS     OrderDuration = 4 //本节有效(good for section)
	OrderDuration_OrderDuration_GTD     OrderDuration = 5 //指定日期前有效(goodl till date)
	OrderDuration_OrderDuration_GTC     OrderDuration = 6 //撤销前有效(good till cancel)
	OrderDuration_OrderDuration_GFA     OrderDuration = 7 //集合竞价前有效(good for auction)
)

// Enum value maps for OrderDuration.
var (
	OrderDuration_name = map[int32]string{
		0: "OrderDuration_Unknown",
		1: "OrderDuration_FAK",
		2: "OrderDuration_FOK",
		3: "OrderDuration_GFD",
		4: "OrderDuration_GFS",
		5: "OrderDuration_GTD",
		6: "OrderDuration_GTC",
		7: "OrderDuration_GFA",
	}
	OrderDuration_value = map[string]int32{
		"OrderDuration_Unknown": 0,
		"OrderDuration_FAK":     1,
		"OrderDuration_FOK":     2,
		"OrderDuration_GFD":     3,
		"OrderDuration_GFS":     4,
		"OrderDuration_GTD":     5,
		"OrderDuration_GTC":     6,
		"OrderDuration_GFA":     7,
	}
)

func (x OrderDuration) Enum() *OrderDuration {
	p := new(OrderDuration)
	*p = x
	return p
}

func (x OrderDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[6].Descriptor()
}

func (OrderDuration) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[6]
}

func (x OrderDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderDuration.Descriptor instead.
func (OrderDuration) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{6}
}

// 委托成交属性
type OrderQualifier int32

const (
	OrderQualifier_OrderQualifier_Unknown OrderQualifier = 0
	OrderQualifier_OrderQualifier_BOC     OrderQualifier = 1 //对方最优价格(best of counterparty)
	OrderQualifier_OrderQualifier_BOP     OrderQualifier = 2 //己方最优价格(best of party)
	OrderQualifier_OrderQualifier_B5TC    OrderQualifier = 3 //最优五档剩余撤销(best 5 then cancel)
	OrderQualifier_OrderQualifier_B5TL    OrderQualifier = 4 //最优五档剩余转限价(best 5 then limit)
)

// Enum value maps for OrderQualifier.
var (
	OrderQualifier_name = map[int32]string{
		0: "OrderQualifier_Unknown",
		1: "OrderQualifier_BOC",
		2: "OrderQualifier_BOP",
		3: "OrderQualifier_B5TC",
		4: "OrderQualifier_B5TL",
	}
	OrderQualifier_value = map[string]int32{
		"OrderQualifier_Unknown": 0,
		"OrderQualifier_BOC":     1,
		"OrderQualifier_BOP":     2,
		"OrderQualifier_B5TC":    3,
		"OrderQualifier_B5TL":    4,
	}
)

func (x OrderQualifier) Enum() *OrderQualifier {
	p := new(OrderQualifier)
	*p = x
	return p
}

func (x OrderQualifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderQualifier) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[7].Descriptor()
}

func (OrderQualifier) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[7]
}

func (x OrderQualifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderQualifier.Descriptor instead.
func (OrderQualifier) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{7}
}

// 持仓方向
type PositionSide int32

const (
	PositionSide_PositionSide_Unknown PositionSide = 0
	PositionSide_PositionSide_Long    PositionSide = 1 //多方向
	PositionSide_PositionSide_Short   PositionSide = 2 //空方向
)

// Enum value maps for PositionSide.
var (
	PositionSide_name = map[int32]string{
		0: "PositionSide_Unknown",
		1: "PositionSide_Long",
		2: "PositionSide_Short",
	}
	PositionSide_value = map[string]int32{
		"PositionSide_Unknown": 0,
		"PositionSide_Long":    1,
		"PositionSide_Short":   2,
	}
)

func (x PositionSide) Enum() *PositionSide {
	p := new(PositionSide)
	*p = x
	return p
}

func (x PositionSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionSide) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[8].Descriptor()
}

func (PositionSide) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[8]
}

func (x PositionSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionSide.Descriptor instead.
func (PositionSide) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{8}
}

// 开平标志
type PositionEffect int32

const (
	PositionEffect_PositionEffect_Unknown        PositionEffect = 0
	PositionEffect_PositionEffect_Open           PositionEffect = 1 //开仓
	PositionEffect_PositionEffect_Close          PositionEffect = 2 //平仓;具体语义取决于对应的交易所
	PositionEffect_PositionEffect_CloseToday     PositionEffect = 3 //平今仓
	PositionEffect_PositionEffect_CloseYesterday PositionEffect = 4 //平昨仓
)

// Enum value maps for PositionEffect.
var (
	PositionEffect_name = map[int32]string{
		0: "PositionEffect_Unknown",
		1: "PositionEffect_Open",
		2: "PositionEffect_Close",
		3: "PositionEffect_CloseToday",
		4: "PositionEffect_CloseYesterday",
	}
	PositionEffect_value = map[string]int32{
		"PositionEffect_Unknown":        0,
		"PositionEffect_Open":           1,
		"PositionEffect_Close":          2,
		"PositionEffect_CloseToday":     3,
		"PositionEffect_CloseYesterday": 4,
	}
)

func (x PositionEffect) Enum() *PositionEffect {
	p := new(PositionEffect)
	*p = x
	return p
}

func (x PositionEffect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionEffect) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[9].Descriptor()
}

func (PositionEffect) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[9]
}

func (x PositionEffect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionEffect.Descriptor instead.
func (PositionEffect) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{9}
}

// 资金持仓变更原因
type CashPositionChangeReason int32

const (
	CashPositionChangeReason_CashPositionChangeReason_Unknown  CashPositionChangeReason = 0
	CashPositionChangeReason_CashPositionChangeReason_Trade    CashPositionChangeReason = 1 //交易
	CashPositionChangeReason_CashPositionChangeReason_Inout    CashPositionChangeReason = 2 //出入金/出入持仓
	CashPositionChangeReason_CashPositionChangeReason_Dividend CashPositionChangeReason = 3 //分红送股
)

// Enum value maps for CashPositionChangeReason.
var (
	CashPositionChangeReason_name = map[int32]string{
		0: "CashPositionChangeReason_Unknown",
		1: "CashPositionChangeReason_Trade",
		2: "CashPositionChangeReason_Inout",
		3: "CashPositionChangeReason_Dividend",
	}
	CashPositionChangeReason_value = map[string]int32{
		"CashPositionChangeReason_Unknown":  0,
		"CashPositionChangeReason_Trade":    1,
		"CashPositionChangeReason_Inout":    2,
		"CashPositionChangeReason_Dividend": 3,
	}
)

func (x CashPositionChangeReason) Enum() *CashPositionChangeReason {
	p := new(CashPositionChangeReason)
	*p = x
	return p
}

func (x CashPositionChangeReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CashPositionChangeReason) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[10].Descriptor()
}

func (CashPositionChangeReason) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[10]
}

func (x CashPositionChangeReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CashPositionChangeReason.Descriptor instead.
func (CashPositionChangeReason) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{10}
}

type AccountState int32

const (
	AccountState_State_UNKNOWN       AccountState = 0 //未知
	AccountState_State_CONNECTING    AccountState = 1 //连接中
	AccountState_State_CONNECTED     AccountState = 2 //已连接
	AccountState_State_LOGGEDIN      AccountState = 3 //已登录
	AccountState_State_DISCONNECTING AccountState = 4 //断开中
	AccountState_State_DISCONNECTED  AccountState = 5 //已断开
	AccountState_State_ERROR         AccountState = 6 //错误
)

// Enum value maps for AccountState.
var (
	AccountState_name = map[int32]string{
		0: "State_UNKNOWN",
		1: "State_CONNECTING",
		2: "State_CONNECTED",
		3: "State_LOGGEDIN",
		4: "State_DISCONNECTING",
		5: "State_DISCONNECTED",
		6: "State_ERROR",
	}
	AccountState_value = map[string]int32{
		"State_UNKNOWN":       0,
		"State_CONNECTING":    1,
		"State_CONNECTED":     2,
		"State_LOGGEDIN":      3,
		"State_DISCONNECTING": 4,
		"State_DISCONNECTED":  5,
		"State_ERROR":         6,
	}
)

func (x AccountState) Enum() *AccountState {
	p := new(AccountState)
	*p = x
	return p
}

func (x AccountState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountState) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[11].Descriptor()
}

func (AccountState) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[11]
}

func (x AccountState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountState.Descriptor instead.
func (AccountState) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{11}
}

// 算法单状态;暂停/恢复算法单时有效
type AlgoOrderStatus int32

const (
	AlgoOrderStatus_AlgoOrderStatus_Unknown                 AlgoOrderStatus = 0
	AlgoOrderStatus_AlgoOrderStatus_Resume                  AlgoOrderStatus = 1 //恢复母单
	AlgoOrderStatus_AlgoOrderStatus_Pause                   AlgoOrderStatus = 2 //暂停母单
	AlgoOrderStatus_AlgoOrderStatus_PauseAndCancelSubOrders AlgoOrderStatus = 3 //暂算母单并撤子单
)

// Enum value maps for AlgoOrderStatus.
var (
	AlgoOrderStatus_name = map[int32]string{
		0: "AlgoOrderStatus_Unknown",
		1: "AlgoOrderStatus_Resume",
		2: "AlgoOrderStatus_Pause",
		3: "AlgoOrderStatus_PauseAndCancelSubOrders",
	}
	AlgoOrderStatus_value = map[string]int32{
		"AlgoOrderStatus_Unknown":                 0,
		"AlgoOrderStatus_Resume":                  1,
		"AlgoOrderStatus_Pause":                   2,
		"AlgoOrderStatus_PauseAndCancelSubOrders": 3,
	}
)

func (x AlgoOrderStatus) Enum() *AlgoOrderStatus {
	p := new(AlgoOrderStatus)
	*p = x
	return p
}

func (x AlgoOrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlgoOrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[12].Descriptor()
}

func (AlgoOrderStatus) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[12]
}

func (x AlgoOrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlgoOrderStatus.Descriptor instead.
func (AlgoOrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{12}
}

// 头寸来源(仅适用融券融券)
type PositionSrc int32

const (
	PositionSrc_PositionSrc_Unknown PositionSrc = 0
	PositionSrc_PositionSrc_L1      PositionSrc = 1 //普通沲
	PositionSrc_PositionSrc_L2      PositionSrc = 2 //专项沲
)

// Enum value maps for PositionSrc.
var (
	PositionSrc_name = map[int32]string{
		0: "PositionSrc_Unknown",
		1: "PositionSrc_L1",
		2: "PositionSrc_L2",
	}
	PositionSrc_value = map[string]int32{
		"PositionSrc_Unknown": 0,
		"PositionSrc_L1":      1,
		"PositionSrc_L2":      2,
	}
)

func (x PositionSrc) Enum() *PositionSrc {
	p := new(PositionSrc)
	*p = x
	return p
}

func (x PositionSrc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionSrc) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[13].Descriptor()
}

func (PositionSrc) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[13]
}

func (x PositionSrc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionSrc.Descriptor instead.
func (PositionSrc) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{13}
}

// 证券类型
type SecurityType int32

const (
	SecurityType_SecurityType_Unknown          SecurityType = 0
	SecurityType_SecurityType_Stock            SecurityType = 1 //股票
	SecurityType_SecurityType_Fund             SecurityType = 2 //基金
	SecurityType_SecurityType_Index            SecurityType = 3 //指数
	SecurityType_SecurityType_Future           SecurityType = 4 //期货
	SecurityType_SecurityType_Option           SecurityType = 5 //期权
	SecurityType_SecurityType_Credit           SecurityType = 6 //两融
	SecurityType_SecurityType_Bond             SecurityType = 7 //债券
	SecurityType_SecurityType_Bond_Convertible SecurityType = 8 //可债券
)

// Enum value maps for SecurityType.
var (
	SecurityType_name = map[int32]string{
		0: "SecurityType_Unknown",
		1: "SecurityType_Stock",
		2: "SecurityType_Fund",
		3: "SecurityType_Index",
		4: "SecurityType_Future",
		5: "SecurityType_Option",
		6: "SecurityType_Credit",
		7: "SecurityType_Bond",
		8: "SecurityType_Bond_Convertible",
	}
	SecurityType_value = map[string]int32{
		"SecurityType_Unknown":          0,
		"SecurityType_Stock":            1,
		"SecurityType_Fund":             2,
		"SecurityType_Index":            3,
		"SecurityType_Future":           4,
		"SecurityType_Option":           5,
		"SecurityType_Credit":           6,
		"SecurityType_Bond":             7,
		"SecurityType_Bond_Convertible": 8,
	}
)

func (x SecurityType) Enum() *SecurityType {
	p := new(SecurityType)
	*p = x
	return p
}

func (x SecurityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityType) Descriptor() protoreflect.EnumDescriptor {
	return file_gmdef_proto_enumTypes[14].Descriptor()
}

func (SecurityType) Type() protoreflect.EnumType {
	return &file_gmdef_proto_enumTypes[14]
}

func (x SecurityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityType.Descriptor instead.
func (SecurityType) EnumDescriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{14}
}

type Bar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Bob       float64 `protobuf:"fixed64,2,opt,name=bob,proto3" json:"bob,omitempty"`                            /// bar的开始时间
	Eob       float64 `protobuf:"fixed64,3,opt,name=eob,proto3" json:"eob,omitempty"`                            /// bar的结束时间
	Open      float32 `protobuf:"fixed32,4,opt,name=open,proto3" json:"open,omitempty"`                          ///<开盘价
	Close     float32 `protobuf:"fixed32,5,opt,name=close,proto3" json:"close,omitempty"`                        ///<收盘价
	High      float32 `protobuf:"fixed32,6,opt,name=high,proto3" json:"high,omitempty"`                          ///<最高价
	Low       float32 `protobuf:"fixed32,7,opt,name=low,proto3" json:"low,omitempty"`                            ///<最低价
	Volume    float64 `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`                      ///<成交量
	Amount    float64 `protobuf:"fixed64,9,opt,name=amount,proto3" json:"amount,omitempty"`                      ///<成交金额
	PreClose  float32 `protobuf:"fixed32,10,opt,name=pre_close,json=preClose,proto3" json:"pre_close,omitempty"` ///昨收盘价，只有日频数据赋值
	Position  int64   `protobuf:"varint,11,opt,name=position,proto3" json:"position,omitempty"`                  ///<持仓量
	Frequency string  `protobuf:"bytes,12,opt,name=frequency,proto3" json:"frequency,omitempty"`                 /// bar频度
}

func (x *Bar) Reset() {
	*x = Bar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bar) ProtoMessage() {}

func (x *Bar) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bar.ProtoReflect.Descriptor instead.
func (*Bar) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{0}
}

func (x *Bar) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Bar) GetBob() float64 {
	if x != nil {
		return x.Bob
	}
	return 0
}

func (x *Bar) GetEob() float64 {
	if x != nil {
		return x.Eob
	}
	return 0
}

func (x *Bar) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Bar) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Bar) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Bar) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Bar) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Bar) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Bar) GetPreClose() float32 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *Bar) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Bar) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BidPrice  float32 `protobuf:"fixed32,1,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`   ///本档委买价
	BidVolume int64   `protobuf:"varint,2,opt,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"` ///本档委买量
	AskPrice  float32 `protobuf:"fixed32,3,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`   ///本档委卖价
	AskVolume int64   `protobuf:"varint,4,opt,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"` ///本档委卖量
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{1}
}

func (x *Quote) GetBidPrice() float32 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *Quote) GetBidVolume() int64 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *Quote) GetAskPrice() float32 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *Quote) GetAskVolume() int64 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

type Tick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol      string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CreatedAt   float64  `protobuf:"fixed64,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      ///< utc时间，精确到毫秒
	Price       float32  `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`                               ///<最新价
	Open        float32  `protobuf:"fixed32,4,opt,name=open,proto3" json:"open,omitempty"`                                 ///<开盘价
	High        float32  `protobuf:"fixed32,5,opt,name=high,proto3" json:"high,omitempty"`                                 ///<最高价
	Low         float32  `protobuf:"fixed32,6,opt,name=low,proto3" json:"low,omitempty"`                                   ///<最低价
	CumVolume   float64  `protobuf:"fixed64,7,opt,name=cum_volume,json=cumVolume,proto3" json:"cum_volume,omitempty"`      ///<成交总量
	CumAmount   float64  `protobuf:"fixed64,8,opt,name=cum_amount,json=cumAmount,proto3" json:"cum_amount,omitempty"`      ///<成交总金额/最新成交额,累计值
	CumPosition int64    `protobuf:"varint,9,opt,name=cum_position,json=cumPosition,proto3" json:"cum_position,omitempty"` ///<合约持仓量(期),累计值
	LastAmount  float64  `protobuf:"fixed64,10,opt,name=last_amount,json=lastAmount,proto3" json:"last_amount,omitempty"`  ///<瞬时成交额
	LastVolume  int32    `protobuf:"varint,11,opt,name=last_volume,json=lastVolume,proto3" json:"last_volume,omitempty"`   ///<瞬时成交量
	TradeType   int32    `protobuf:"varint,12,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`      ///(保留)交易类型,对应多开,多平等类型
	Quotes      []*Quote `protobuf:"bytes,13,rep,name=quotes,proto3" json:"quotes,omitempty"`                              ///报价, 下标从0开始，0-表示第一档，1-表示第二档，依次类推
}

func (x *Tick) Reset() {
	*x = Tick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{2}
}

func (x *Tick) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Tick) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Tick) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Tick) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Tick) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Tick) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Tick) GetCumVolume() float64 {
	if x != nil {
		return x.CumVolume
	}
	return 0
}

func (x *Tick) GetCumAmount() float64 {
	if x != nil {
		return x.CumAmount
	}
	return 0
}

func (x *Tick) GetCumPosition() int64 {
	if x != nil {
		return x.CumPosition
	}
	return 0
}

func (x *Tick) GetLastAmount() float64 {
	if x != nil {
		return x.LastAmount
	}
	return 0
}

func (x *Tick) GetLastVolume() int32 {
	if x != nil {
		return x.LastVolume
	}
	return 0
}

func (x *Tick) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *Tick) GetQuotes() []*Quote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type L2Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol        string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CreatedAt     float64 `protobuf:"fixed64,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`              ///成交时间，utc时间
	Price         float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`                                       ///成交价
	Volume        int64   `protobuf:"varint,4,opt,name=volume,proto3" json:"volume,omitempty"`                                      ///成交量
	Side          string  `protobuf:"bytes,5,opt,name=side,proto3" json:"side,omitempty"`                                           ///内外盘标记
	ExecType      string  `protobuf:"bytes,6,opt,name=exec_type,json=execType,proto3" json:"exec_type,omitempty"`                   ///成交类型
	ExecIndex     int64   `protobuf:"varint,7,opt,name=exec_index,json=execIndex,proto3" json:"exec_index,omitempty"`               ///成交编号
	AskOrderIndex int64   `protobuf:"varint,8,opt,name=ask_order_index,json=askOrderIndex,proto3" json:"ask_order_index,omitempty"` ///叫卖委托编号
	BidOrderIndex int64   `protobuf:"varint,9,opt,name=bid_order_index,json=bidOrderIndex,proto3" json:"bid_order_index,omitempty"` ///叫买委托编号
}

func (x *L2Transaction) Reset() {
	*x = L2Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2Transaction) ProtoMessage() {}

func (x *L2Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2Transaction.ProtoReflect.Descriptor instead.
func (*L2Transaction) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{3}
}

func (x *L2Transaction) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *L2Transaction) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *L2Transaction) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *L2Transaction) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *L2Transaction) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *L2Transaction) GetExecType() string {
	if x != nil {
		return x.ExecType
	}
	return ""
}

func (x *L2Transaction) GetExecIndex() int64 {
	if x != nil {
		return x.ExecIndex
	}
	return 0
}

func (x *L2Transaction) GetAskOrderIndex() int64 {
	if x != nil {
		return x.AskOrderIndex
	}
	return 0
}

func (x *L2Transaction) GetBidOrderIndex() int64 {
	if x != nil {
		return x.BidOrderIndex
	}
	return 0
}

type L2Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CreatedAt  float64 `protobuf:"fixed64,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`   ///委托时间，utc时间
	Price      float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`                            ///委托价
	Volume     int64   `protobuf:"varint,4,opt,name=volume,proto3" json:"volume,omitempty"`                           ///委托量
	Side       string  `protobuf:"bytes,5,opt,name=side,proto3" json:"side,omitempty"`                                ///买卖方向
	OrderType  string  `protobuf:"bytes,6,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`     ///委托类型
	OrderIndex int64   `protobuf:"varint,7,opt,name=order_index,json=orderIndex,proto3" json:"order_index,omitempty"` ///委托编号
}

func (x *L2Order) Reset() {
	*x = L2Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2Order) ProtoMessage() {}

func (x *L2Order) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2Order.ProtoReflect.Descriptor instead.
func (*L2Order) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{4}
}

func (x *L2Order) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *L2Order) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *L2Order) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *L2Order) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *L2Order) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *L2Order) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *L2Order) GetOrderIndex() int64 {
	if x != nil {
		return x.OrderIndex
	}
	return 0
}

type L2OrderQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol       string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CreatedAt    float64 `protobuf:"fixed64,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                ///行情时间，utc时间
	Price        float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`                                         ///最优委托价
	Volume       int64   `protobuf:"varint,4,opt,name=volume,proto3" json:"volume,omitempty"`                                        ///委托量
	Side         string  `protobuf:"bytes,5,opt,name=side,proto3" json:"side,omitempty"`                                             ///买卖方向
	QueueOrders  int32   `protobuf:"varint,6,opt,name=queue_orders,json=queueOrders,proto3" json:"queue_orders,omitempty"`           ///委托量队列中元素个数(最多50)
	QueueVolumes []int32 `protobuf:"varint,7,rep,packed,name=queue_volumes,json=queueVolumes,proto3" json:"queue_volumes,omitempty"` ///委托量队列(最多50个，有可能小于50, 有效数据长度取决于queue_orders)
}

func (x *L2OrderQueue) Reset() {
	*x = L2OrderQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2OrderQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2OrderQueue) ProtoMessage() {}

func (x *L2OrderQueue) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2OrderQueue.ProtoReflect.Descriptor instead.
func (*L2OrderQueue) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{5}
}

func (x *L2OrderQueue) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *L2OrderQueue) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *L2OrderQueue) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *L2OrderQueue) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *L2OrderQueue) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *L2OrderQueue) GetQueueOrders() int32 {
	if x != nil {
		return x.QueueOrders
	}
	return 0
}

func (x *L2OrderQueue) GetQueueVolumes() []int32 {
	if x != nil {
		return x.QueueVolumes
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyId         string  `protobuf:"bytes,1,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`                              //策略ID
	AccountId          string  `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                 //账号ID
	AccountName        string  `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`                           //账户登录名
	ClOrdId            string  `protobuf:"bytes,4,opt,name=cl_ord_id,json=clOrdId,proto3" json:"cl_ord_id,omitempty"`                                     //委托客户端ID
	OrderId            string  `protobuf:"bytes,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                       //委托柜台ID
	ExOrdId            string  `protobuf:"bytes,6,opt,name=ex_ord_id,json=exOrdId,proto3" json:"ex_ord_id,omitempty"`                                     //委托交易所ID
	AlgoOrderId        string  `protobuf:"bytes,7,opt,name=algo_order_id,json=algoOrderId,proto3" json:"algo_order_id,omitempty"`                         //算法母单ID
	OrderBusiness      int32   `protobuf:"varint,8,opt,name=order_business,json=orderBusiness,proto3" json:"order_business,omitempty"`                    //业务类型
	Symbol             string  `protobuf:"bytes,9,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                        // symbol
	Side               int32   `protobuf:"varint,10,opt,name=side,proto3" json:"side,omitempty"`                                                          //买卖方向，取值参考enum OrderSide
	PositionEffect     int32   `protobuf:"varint,11,opt,name=position_effect,json=positionEffect,proto3" json:"position_effect,omitempty"`                //开平标志，取值参考enum PositionEffect
	PositionSide       int32   `protobuf:"varint,12,opt,name=position_side,json=positionSide,proto3" json:"position_side,omitempty"`                      //持仓方向，取值参考enum PositionSide
	OrderType          int32   `protobuf:"varint,13,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`                               //委托类型，取值参考enum OrderType
	OrderDuration      int32   `protobuf:"varint,14,opt,name=order_duration,json=orderDuration,proto3" json:"order_duration,omitempty"`                   //委托时间属性，取值参考enum OrderDuration
	OrderQualifier     int32   `protobuf:"varint,15,opt,name=order_qualifier,json=orderQualifier,proto3" json:"order_qualifier,omitempty"`                //委托成交属性，取值参考enum OrderQualifier
	OrderSrc           int32   `protobuf:"varint,16,opt,name=order_src,json=orderSrc,proto3" json:"order_src,omitempty"`                                  //委托来源，取值参考enum OrderSrc
	PositionSrc        int32   `protobuf:"varint,17,opt,name=position_src,json=positionSrc,proto3" json:"position_src,omitempty"`                         //头寸来源（仅适用融资融券），取值参考 enum PositionSrc
	Status             int32   `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`                                                      //委托状态，取值参考enum OrderStatus
	OrdRejReason       int32   `protobuf:"varint,19,opt,name=ord_rej_reason,json=ordRejReason,proto3" json:"ord_rej_reason,omitempty"`                    //委托拒绝原因，取值参考enum OrderRejectReason
	OrdRejReasonDetail string  `protobuf:"bytes,20,opt,name=ord_rej_reason_detail,json=ordRejReasonDetail,proto3" json:"ord_rej_reason_detail,omitempty"` //委托拒绝原因描述
	Price              float64 `protobuf:"fixed64,21,opt,name=price,proto3" json:"price,omitempty"`                                                       //委托价格
	StopPrice          float64 `protobuf:"fixed64,22,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`                              //委托止损/止盈触发价格
	OrderStyle         int32   `protobuf:"varint,23,opt,name=order_style,json=orderStyle,proto3" json:"order_style,omitempty"`                            //委托风格，取值参考 enum OrderStyle
	Volume             int64   `protobuf:"varint,24,opt,name=volume,proto3" json:"volume,omitempty"`                                                      //委托量
	Value              float64 `protobuf:"fixed64,25,opt,name=value,proto3" json:"value,omitempty"`                                                       //委托额
	Percent            float64 `protobuf:"fixed64,26,opt,name=percent,proto3" json:"percent,omitempty"`                                                   //委托百分比
	TargetVolume       int64   `protobuf:"varint,27,opt,name=target_volume,json=targetVolume,proto3" json:"target_volume,omitempty"`                      //委托目标量
	TargetValue        float64 `protobuf:"fixed64,28,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`                        //委托目标额
	TargetPercent      float64 `protobuf:"fixed64,29,opt,name=target_percent,json=targetPercent,proto3" json:"target_percent,omitempty"`                  //委托目标百分比
	FilledVolume       int64   `protobuf:"varint,30,opt,name=filled_volume,json=filledVolume,proto3" json:"filled_volume,omitempty"`                      //已成量
	FilledVwap         float64 `protobuf:"fixed64,31,opt,name=filled_vwap,json=filledVwap,proto3" json:"filled_vwap,omitempty"`                           //已成均价
	FilledAmount       float64 `protobuf:"fixed64,32,opt,name=filled_amount,json=filledAmount,proto3" json:"filled_amount,omitempty"`                     //已成金额
	FilledCommission   float64 `protobuf:"fixed64,33,opt,name=filled_commission,json=filledCommission,proto3" json:"filled_commission,omitempty"`         //已成手续费
	CreatedAt          int64   `protobuf:"varint,34,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                               //委托创建时间
	UpdatedAt          int64   `protobuf:"varint,35,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                               //委托更新时间
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{6}
}

func (x *Order) GetStrategyId() string {
	if x != nil {
		return x.StrategyId
	}
	return ""
}

func (x *Order) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Order) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *Order) GetClOrdId() string {
	if x != nil {
		return x.ClOrdId
	}
	return ""
}

func (x *Order) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Order) GetExOrdId() string {
	if x != nil {
		return x.ExOrdId
	}
	return ""
}

func (x *Order) GetAlgoOrderId() string {
	if x != nil {
		return x.AlgoOrderId
	}
	return ""
}

func (x *Order) GetOrderBusiness() int32 {
	if x != nil {
		return x.OrderBusiness
	}
	return 0
}

func (x *Order) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Order) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *Order) GetPositionEffect() int32 {
	if x != nil {
		return x.PositionEffect
	}
	return 0
}

func (x *Order) GetPositionSide() int32 {
	if x != nil {
		return x.PositionSide
	}
	return 0
}

func (x *Order) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *Order) GetOrderDuration() int32 {
	if x != nil {
		return x.OrderDuration
	}
	return 0
}

func (x *Order) GetOrderQualifier() int32 {
	if x != nil {
		return x.OrderQualifier
	}
	return 0
}

func (x *Order) GetOrderSrc() int32 {
	if x != nil {
		return x.OrderSrc
	}
	return 0
}

func (x *Order) GetPositionSrc() int32 {
	if x != nil {
		return x.PositionSrc
	}
	return 0
}

func (x *Order) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Order) GetOrdRejReason() int32 {
	if x != nil {
		return x.OrdRejReason
	}
	return 0
}

func (x *Order) GetOrdRejReasonDetail() string {
	if x != nil {
		return x.OrdRejReasonDetail
	}
	return ""
}

func (x *Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *Order) GetOrderStyle() int32 {
	if x != nil {
		return x.OrderStyle
	}
	return 0
}

func (x *Order) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Order) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Order) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *Order) GetTargetVolume() int64 {
	if x != nil {
		return x.TargetVolume
	}
	return 0
}

func (x *Order) GetTargetValue() float64 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *Order) GetTargetPercent() float64 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *Order) GetFilledVolume() int64 {
	if x != nil {
		return x.FilledVolume
	}
	return 0
}

func (x *Order) GetFilledVwap() float64 {
	if x != nil {
		return x.FilledVwap
	}
	return 0
}

func (x *Order) GetFilledAmount() float64 {
	if x != nil {
		return x.FilledAmount
	}
	return 0
}

func (x *Order) GetFilledCommission() float64 {
	if x != nil {
		return x.FilledCommission
	}
	return 0
}

func (x *Order) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Order) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AlgoOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyId         string  `protobuf:"bytes,1,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`                              //策略ID
	AccountId          string  `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                 //账号ID
	AccountName        string  `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`                           //账户登录名
	ClOrdId            string  `protobuf:"bytes,4,opt,name=cl_ord_id,json=clOrdId,proto3" json:"cl_ord_id,omitempty"`                                     //委托客户端ID
	OrderId            string  `protobuf:"bytes,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                       //委托柜台ID
	ExOrdId            string  `protobuf:"bytes,6,opt,name=ex_ord_id,json=exOrdId,proto3" json:"ex_ord_id,omitempty"`                                     //委托交易所ID
	OrderBusiness      int32   `protobuf:"varint,7,opt,name=order_business,json=orderBusiness,proto3" json:"order_business,omitempty"`                    //业务类型
	Symbol             string  `protobuf:"bytes,8,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                        // symbol
	Side               int32   `protobuf:"varint,9,opt,name=side,proto3" json:"side,omitempty"`                                                           //买卖方向，取值参考enum OrderSide
	PositionEffect     int32   `protobuf:"varint,10,opt,name=position_effect,json=positionEffect,proto3" json:"position_effect,omitempty"`                //开平标志，取值参考enum PositionEffect
	PositionSide       int32   `protobuf:"varint,11,opt,name=position_side,json=positionSide,proto3" json:"position_side,omitempty"`                      //持仓方向，取值参考enum PositionSide
	OrderType          int32   `protobuf:"varint,12,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`                               //委托类型，取值参考enum OrderType
	OrderDuration      int32   `protobuf:"varint,13,opt,name=order_duration,json=orderDuration,proto3" json:"order_duration,omitempty"`                   //委托时间属性，取值参考enum OrderDuration
	OrderQualifier     int32   `protobuf:"varint,14,opt,name=order_qualifier,json=orderQualifier,proto3" json:"order_qualifier,omitempty"`                //委托成交属性，取值参考enum OrderQualifier
	OrderSrc           int32   `protobuf:"varint,15,opt,name=order_src,json=orderSrc,proto3" json:"order_src,omitempty"`                                  //委托来源，取值参考enum OrderSrc
	PositionSrc        int32   `protobuf:"varint,16,opt,name=position_src,json=positionSrc,proto3" json:"position_src,omitempty"`                         //头寸来源（仅适用融资融券），取值参考 enum PositionSrc
	Status             int32   `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`                                                      //委托状态，取值参考enum OrderStatus
	OrdRejReason       int32   `protobuf:"varint,18,opt,name=ord_rej_reason,json=ordRejReason,proto3" json:"ord_rej_reason,omitempty"`                    //委托拒绝原因，取值参考enum OrderRejectReason
	OrdRejReasonDetail string  `protobuf:"bytes,19,opt,name=ord_rej_reason_detail,json=ordRejReasonDetail,proto3" json:"ord_rej_reason_detail,omitempty"` //委托拒绝原因描述
	Price              float64 `protobuf:"fixed64,20,opt,name=price,proto3" json:"price,omitempty"`                                                       //委托价格
	StopPrice          float64 `protobuf:"fixed64,21,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`                              //委托止损/止盈触发价格
	OrderStyle         int32   `protobuf:"varint,22,opt,name=order_style,json=orderStyle,proto3" json:"order_style,omitempty"`                            //委托风格，取值参考 enum OrderStyle
	Volume             int64   `protobuf:"varint,23,opt,name=volume,proto3" json:"volume,omitempty"`                                                      //委托量
	Value              float64 `protobuf:"fixed64,24,opt,name=value,proto3" json:"value,omitempty"`                                                       //委托额
	Percent            float64 `protobuf:"fixed64,25,opt,name=percent,proto3" json:"percent,omitempty"`                                                   //委托百分比
	TargetVolume       int64   `protobuf:"varint,26,opt,name=target_volume,json=targetVolume,proto3" json:"target_volume,omitempty"`                      //委托目标量
	TargetValue        float64 `protobuf:"fixed64,27,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`                        //委托目标额
	TargetPercent      float64 `protobuf:"fixed64,28,opt,name=target_percent,json=targetPercent,proto3" json:"target_percent,omitempty"`                  //委托目标百分比
	FilledVolume       int64   `protobuf:"varint,29,opt,name=filled_volume,json=filledVolume,proto3" json:"filled_volume,omitempty"`                      //已成量
	FilledVwap         float64 `protobuf:"fixed64,30,opt,name=filled_vwap,json=filledVwap,proto3" json:"filled_vwap,omitempty"`                           //已成均价
	FilledAmount       float64 `protobuf:"fixed64,31,opt,name=filled_amount,json=filledAmount,proto3" json:"filled_amount,omitempty"`                     //已成金额
	FilledCommission   float64 `protobuf:"fixed64,32,opt,name=filled_commission,json=filledCommission,proto3" json:"filled_commission,omitempty"`         //已成手续费
	AlgoName           string  `protobuf:"bytes,33,opt,name=algo_name,json=algoName,proto3" json:"algo_name,omitempty"`                                   //算法策略名
	AlgoParam          string  `protobuf:"bytes,34,opt,name=algo_param,json=algoParam,proto3" json:"algo_param,omitempty"`                                //算法策略参数
	AlgoStatus         int32   `protobuf:"varint,35,opt,name=algo_status,json=algoStatus,proto3" json:"algo_status,omitempty"`                            //算法策略状态,仅作为AlgoOrder Pause请求入参，取值参考 enum AlgoOrderStatus
	AlgoComment        string  `protobuf:"bytes,36,opt,name=algo_comment,json=algoComment,proto3" json:"algo_comment,omitempty"`                          //算法单备注
	CreatedAt          int64   `protobuf:"varint,37,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                               //委托创建时间
	UpdatedAt          int64   `protobuf:"varint,38,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                               //委托更新时间
}

func (x *AlgoOrder) Reset() {
	*x = AlgoOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgoOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoOrder) ProtoMessage() {}

func (x *AlgoOrder) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoOrder.ProtoReflect.Descriptor instead.
func (*AlgoOrder) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{7}
}

func (x *AlgoOrder) GetStrategyId() string {
	if x != nil {
		return x.StrategyId
	}
	return ""
}

func (x *AlgoOrder) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AlgoOrder) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AlgoOrder) GetClOrdId() string {
	if x != nil {
		return x.ClOrdId
	}
	return ""
}

func (x *AlgoOrder) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlgoOrder) GetExOrdId() string {
	if x != nil {
		return x.ExOrdId
	}
	return ""
}

func (x *AlgoOrder) GetOrderBusiness() int32 {
	if x != nil {
		return x.OrderBusiness
	}
	return 0
}

func (x *AlgoOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AlgoOrder) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *AlgoOrder) GetPositionEffect() int32 {
	if x != nil {
		return x.PositionEffect
	}
	return 0
}

func (x *AlgoOrder) GetPositionSide() int32 {
	if x != nil {
		return x.PositionSide
	}
	return 0
}

func (x *AlgoOrder) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *AlgoOrder) GetOrderDuration() int32 {
	if x != nil {
		return x.OrderDuration
	}
	return 0
}

func (x *AlgoOrder) GetOrderQualifier() int32 {
	if x != nil {
		return x.OrderQualifier
	}
	return 0
}

func (x *AlgoOrder) GetOrderSrc() int32 {
	if x != nil {
		return x.OrderSrc
	}
	return 0
}

func (x *AlgoOrder) GetPositionSrc() int32 {
	if x != nil {
		return x.PositionSrc
	}
	return 0
}

func (x *AlgoOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AlgoOrder) GetOrdRejReason() int32 {
	if x != nil {
		return x.OrdRejReason
	}
	return 0
}

func (x *AlgoOrder) GetOrdRejReasonDetail() string {
	if x != nil {
		return x.OrdRejReasonDetail
	}
	return ""
}

func (x *AlgoOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AlgoOrder) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *AlgoOrder) GetOrderStyle() int32 {
	if x != nil {
		return x.OrderStyle
	}
	return 0
}

func (x *AlgoOrder) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *AlgoOrder) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AlgoOrder) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *AlgoOrder) GetTargetVolume() int64 {
	if x != nil {
		return x.TargetVolume
	}
	return 0
}

func (x *AlgoOrder) GetTargetValue() float64 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *AlgoOrder) GetTargetPercent() float64 {
	if x != nil {
		return x.TargetPercent
	}
	return 0
}

func (x *AlgoOrder) GetFilledVolume() int64 {
	if x != nil {
		return x.FilledVolume
	}
	return 0
}

func (x *AlgoOrder) GetFilledVwap() float64 {
	if x != nil {
		return x.FilledVwap
	}
	return 0
}

func (x *AlgoOrder) GetFilledAmount() float64 {
	if x != nil {
		return x.FilledAmount
	}
	return 0
}

func (x *AlgoOrder) GetFilledCommission() float64 {
	if x != nil {
		return x.FilledCommission
	}
	return 0
}

func (x *AlgoOrder) GetAlgoName() string {
	if x != nil {
		return x.AlgoName
	}
	return ""
}

func (x *AlgoOrder) GetAlgoParam() string {
	if x != nil {
		return x.AlgoParam
	}
	return ""
}

func (x *AlgoOrder) GetAlgoStatus() int32 {
	if x != nil {
		return x.AlgoStatus
	}
	return 0
}

func (x *AlgoOrder) GetAlgoComment() string {
	if x != nil {
		return x.AlgoComment
	}
	return ""
}

func (x *AlgoOrder) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AlgoOrder) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type ExecRpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyId         string  `protobuf:"bytes,1,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`                              //策略ID
	AccountId          string  `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                 //账号ID
	AccountName        string  `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`                           //账户登录名
	ClOrdId            string  `protobuf:"bytes,4,opt,name=cl_ord_id,json=clOrdId,proto3" json:"cl_ord_id,omitempty"`                                     //委托客户端ID
	OrderId            string  `protobuf:"bytes,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                       //委托柜台ID
	ExecId             string  `protobuf:"bytes,6,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`                                          //委托回报ID
	Symbol             string  `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                        // symbol
	PositionEffect     int32   `protobuf:"varint,8,opt,name=position_effect,json=positionEffect,proto3" json:"position_effect,omitempty"`                 //开平标志，取值参考enum PositionEffect
	Side               int32   `protobuf:"varint,9,opt,name=side,proto3" json:"side,omitempty"`                                                           //买卖方向，取值参考enum OrderSide
	OrdRejReason       int32   `protobuf:"varint,10,opt,name=ord_rej_reason,json=ordRejReason,proto3" json:"ord_rej_reason,omitempty"`                    //委托拒绝原因，取值参考enum OrderRejectReason
	OrdRejReasonDetail string  `protobuf:"bytes,11,opt,name=ord_rej_reason_detail,json=ordRejReasonDetail,proto3" json:"ord_rej_reason_detail,omitempty"` //委托拒绝原因描述
	ExecType           int32   `protobuf:"varint,12,opt,name=exec_type,json=execType,proto3" json:"exec_type,omitempty"`                                  //执行回报类型, 取值参考enum ExecType
	Price              float64 `protobuf:"fixed64,13,opt,name=price,proto3" json:"price,omitempty"`                                                       //委托成交价格
	Volume             int64   `protobuf:"varint,14,opt,name=volume,proto3" json:"volume,omitempty"`                                                      //委托成交量
	Amount             float64 `protobuf:"fixed64,15,opt,name=amount,proto3" json:"amount,omitempty"`                                                     //委托成交金额
	Commission         float64 `protobuf:"fixed64,16,opt,name=commission,proto3" json:"commission,omitempty"`                                             //委托成交手续费
	Cost               float64 `protobuf:"fixed64,17,opt,name=cost,proto3" json:"cost,omitempty"`                                                         //委托成交成本金额
	CreatedAt          int64   `protobuf:"varint,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                               //回报创建时间
}

func (x *ExecRpt) Reset() {
	*x = ExecRpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRpt) ProtoMessage() {}

func (x *ExecRpt) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRpt.ProtoReflect.Descriptor instead.
func (*ExecRpt) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{8}
}

func (x *ExecRpt) GetStrategyId() string {
	if x != nil {
		return x.StrategyId
	}
	return ""
}

func (x *ExecRpt) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ExecRpt) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ExecRpt) GetClOrdId() string {
	if x != nil {
		return x.ClOrdId
	}
	return ""
}

func (x *ExecRpt) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ExecRpt) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

func (x *ExecRpt) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ExecRpt) GetPositionEffect() int32 {
	if x != nil {
		return x.PositionEffect
	}
	return 0
}

func (x *ExecRpt) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *ExecRpt) GetOrdRejReason() int32 {
	if x != nil {
		return x.OrdRejReason
	}
	return 0
}

func (x *ExecRpt) GetOrdRejReasonDetail() string {
	if x != nil {
		return x.OrdRejReasonDetail
	}
	return ""
}

func (x *ExecRpt) GetExecType() int32 {
	if x != nil {
		return x.ExecType
	}
	return 0
}

func (x *ExecRpt) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ExecRpt) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ExecRpt) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ExecRpt) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *ExecRpt) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *ExecRpt) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type Cash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`         //账号ID
	AccountName string  `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`   //账户登录名
	Currency    int32   `protobuf:"varint,3,opt,name=currency,proto3" json:"currency,omitempty"`                           //币种
	Nav         float64 `protobuf:"fixed64,4,opt,name=nav,proto3" json:"nav,omitempty"`                                    //净值(cum_inout + cum_pnl + fpnl - cum_commission)
	Pnl         float64 `protobuf:"fixed64,5,opt,name=pnl,proto3" json:"pnl,omitempty"`                                    //净收益(nav-cum_inout)
	Fpnl        float64 `protobuf:"fixed64,6,opt,name=fpnl,proto3" json:"fpnl,omitempty"`                                  //浮动盈亏(sum(each position fpnl))
	Frozen      float64 `protobuf:"fixed64,7,opt,name=frozen,proto3" json:"frozen,omitempty"`                              //持仓占用资金
	OrderFrozen float64 `protobuf:"fixed64,8,opt,name=order_frozen,json=orderFrozen,proto3" json:"order_frozen,omitempty"` //挂单冻结资金
	Available   float64 `protobuf:"fixed64,9,opt,name=available,proto3" json:"available,omitempty"`                        //可用资金
	// no  leverage:  available=(cum_inout + cum_pnl - cum_commission - frozen - order_frozen)
	// has leverage:  fpnl     =(fpnl>0 ? fpnl : (frozen < |fpnl|) ? (frozen-|fpnl|) : 0)
	//
	//	available=(cum_inout + cum_pnl - cum_commission - frozen - order_frozen + fpnl)
	Balance        float64 `protobuf:"fixed64,10,opt,name=balance,proto3" json:"balance,omitempty"`                                     //资金余额
	MarketValue    float64 `protobuf:"fixed64,11,opt,name=market_value,json=marketValue,proto3" json:"market_value,omitempty"`          //持仓市值
	CumInout       float64 `protobuf:"fixed64,12,opt,name=cum_inout,json=cumInout,proto3" json:"cum_inout,omitempty"`                   //累计出入金
	CumTrade       float64 `protobuf:"fixed64,13,opt,name=cum_trade,json=cumTrade,proto3" json:"cum_trade,omitempty"`                   //累计交易额
	CumPnl         float64 `protobuf:"fixed64,14,opt,name=cum_pnl,json=cumPnl,proto3" json:"cum_pnl,omitempty"`                         //累计平仓收益(没扣除手续费)
	CumCommission  float64 `protobuf:"fixed64,15,opt,name=cum_commission,json=cumCommission,proto3" json:"cum_commission,omitempty"`    //累计手续费
	LastTrade      float64 `protobuf:"fixed64,16,opt,name=last_trade,json=lastTrade,proto3" json:"last_trade,omitempty"`                //上一次交易额
	LastPnl        float64 `protobuf:"fixed64,17,opt,name=last_pnl,json=lastPnl,proto3" json:"last_pnl,omitempty"`                      //上一次收益
	LastCommission float64 `protobuf:"fixed64,18,opt,name=last_commission,json=lastCommission,proto3" json:"last_commission,omitempty"` //上一次手续费
	LastInout      float64 `protobuf:"fixed64,19,opt,name=last_inout,json=lastInout,proto3" json:"last_inout,omitempty"`                //上一次出入金
	ChangeReason   int32   `protobuf:"varint,20,opt,name=change_reason,json=changeReason,proto3" json:"change_reason,omitempty"`        //资金变更原因，取值参考enum CashPositionChangeReason
	ChangeEventId  string  `protobuf:"bytes,21,opt,name=change_event_id,json=changeEventId,proto3" json:"change_event_id,omitempty"`    //触发资金变更事件的ID
	CreatedAt      int64   `protobuf:"varint,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                 //资金初始时间
	UpdatedAt      int64   `protobuf:"varint,23,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                 //资金变更时间
}

func (x *Cash) Reset() {
	*x = Cash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cash) ProtoMessage() {}

func (x *Cash) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cash.ProtoReflect.Descriptor instead.
func (*Cash) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{9}
}

func (x *Cash) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Cash) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *Cash) GetCurrency() int32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *Cash) GetNav() float64 {
	if x != nil {
		return x.Nav
	}
	return 0
}

func (x *Cash) GetPnl() float64 {
	if x != nil {
		return x.Pnl
	}
	return 0
}

func (x *Cash) GetFpnl() float64 {
	if x != nil {
		return x.Fpnl
	}
	return 0
}

func (x *Cash) GetFrozen() float64 {
	if x != nil {
		return x.Frozen
	}
	return 0
}

func (x *Cash) GetOrderFrozen() float64 {
	if x != nil {
		return x.OrderFrozen
	}
	return 0
}

func (x *Cash) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *Cash) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Cash) GetMarketValue() float64 {
	if x != nil {
		return x.MarketValue
	}
	return 0
}

func (x *Cash) GetCumInout() float64 {
	if x != nil {
		return x.CumInout
	}
	return 0
}

func (x *Cash) GetCumTrade() float64 {
	if x != nil {
		return x.CumTrade
	}
	return 0
}

func (x *Cash) GetCumPnl() float64 {
	if x != nil {
		return x.CumPnl
	}
	return 0
}

func (x *Cash) GetCumCommission() float64 {
	if x != nil {
		return x.CumCommission
	}
	return 0
}

func (x *Cash) GetLastTrade() float64 {
	if x != nil {
		return x.LastTrade
	}
	return 0
}

func (x *Cash) GetLastPnl() float64 {
	if x != nil {
		return x.LastPnl
	}
	return 0
}

func (x *Cash) GetLastCommission() float64 {
	if x != nil {
		return x.LastCommission
	}
	return 0
}

func (x *Cash) GetLastInout() float64 {
	if x != nil {
		return x.LastInout
	}
	return 0
}

func (x *Cash) GetChangeReason() int32 {
	if x != nil {
		return x.ChangeReason
	}
	return 0
}

func (x *Cash) GetChangeEventId() string {
	if x != nil {
		return x.ChangeEventId
	}
	return ""
}

func (x *Cash) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Cash) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        string  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                          //账号ID
	AccountName      string  `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`                    //账户登录名
	Symbol           string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                 // symbol
	Side             int32   `protobuf:"varint,4,opt,name=side,proto3" json:"side,omitempty"`                                                    //持仓方向，取值参考enum PositionSide
	Volume           int64   `protobuf:"varint,5,opt,name=volume,proto3" json:"volume,omitempty"`                                                //总持仓量=; 昨持仓量(volume-volume_today)
	VolumeToday      int64   `protobuf:"varint,6,opt,name=volume_today,json=volumeToday,proto3" json:"volume_today,omitempty"`                   //今日持仓量
	Vwap             float64 `protobuf:"fixed64,7,opt,name=vwap,proto3" json:"vwap,omitempty"`                                                   //持仓均价(股票为基于开仓价的持仓均价，期货为基于结算价的持仓均价)
	VwapDiluted      float64 `protobuf:"fixed64,8,opt,name=vwap_diluted,json=vwapDiluted,proto3" json:"vwap_diluted,omitempty"`                  //摊薄成本价
	VwapOpen         float64 `protobuf:"fixed64,9,opt,name=vwap_open,json=vwapOpen,proto3" json:"vwap_open,omitempty"`                           //基于开仓价的持仓均价(期货)
	Amount           float64 `protobuf:"fixed64,10,opt,name=amount,proto3" json:"amount,omitempty"`                                              //持仓额(volume*vwap*multiplier)
	Price            float64 `protobuf:"fixed64,11,opt,name=price,proto3" json:"price,omitempty"`                                                //当前行情价格
	Fpnl             float64 `protobuf:"fixed64,12,opt,name=fpnl,proto3" json:"fpnl,omitempty"`                                                  //持仓浮动盈亏((price-vwap)*volume*multiplier)
	FpnlOpen         float64 `protobuf:"fixed64,13,opt,name=fpnl_open,json=fpnlOpen,proto3" json:"fpnl_open,omitempty"`                          //持仓浮动盈亏,基于开仓均价，适用于期货((price-vwap_open)*volume*multiplier)
	Cost             float64 `protobuf:"fixed64,14,opt,name=cost,proto3" json:"cost,omitempty"`                                                  //持仓成本(vwap*volume*multiplier*margin_ratio)
	OrderFrozen      int64   `protobuf:"varint,15,opt,name=order_frozen,json=orderFrozen,proto3" json:"order_frozen,omitempty"`                  //挂单冻结仓位
	OrderFrozenToday int64   `protobuf:"varint,16,opt,name=order_frozen_today,json=orderFrozenToday,proto3" json:"order_frozen_today,omitempty"` //挂单冻结今仓仓位
	Available        int64   `protobuf:"varint,17,opt,name=available,proto3" json:"available,omitempty"`                                         //可用总仓位(volume-order_frozen)=; 可用昨仓位(available-available_today)
	AvailableToday   int64   `protobuf:"varint,18,opt,name=available_today,json=availableToday,proto3" json:"available_today,omitempty"`         //可用今仓位(volume_today-order_frozen_today)
	AvailableNow     int64   `protobuf:"varint,19,opt,name=available_now,json=availableNow,proto3" json:"available_now,omitempty"`               //当前可平仓位
	MarketValue      float64 `protobuf:"fixed64,20,opt,name=market_value,json=marketValue,proto3" json:"market_value,omitempty"`                 //持仓市值
	LastPrice        float64 `protobuf:"fixed64,21,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`                       //上一次成交价
	LastVolume       int64   `protobuf:"varint,22,opt,name=last_volume,json=lastVolume,proto3" json:"last_volume,omitempty"`                     //上一次成交量
	LastInout        int64   `protobuf:"varint,23,opt,name=last_inout,json=lastInout,proto3" json:"last_inout,omitempty"`                        //上一次出入持仓量
	ChangeReason     int32   `protobuf:"varint,24,opt,name=change_reason,json=changeReason,proto3" json:"change_reason,omitempty"`               //仓位变更原因，取值参考enum CashPositionChangeReason
	ChangeEventId    string  `protobuf:"bytes,25,opt,name=change_event_id,json=changeEventId,proto3" json:"change_event_id,omitempty"`           //触发资金变更事件的ID
	HasDividend      int32   `protobuf:"varint,26,opt,name=has_dividend,json=hasDividend,proto3" json:"has_dividend,omitempty"`                  //持仓区间有分红配送
	CreatedAt        int64   `protobuf:"varint,27,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                        //建仓时间
	UpdatedAt        int64   `protobuf:"varint,28,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                        //仓位变更时间
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{10}
}

func (x *Position) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Position) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *Position) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Position) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *Position) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Position) GetVolumeToday() int64 {
	if x != nil {
		return x.VolumeToday
	}
	return 0
}

func (x *Position) GetVwap() float64 {
	if x != nil {
		return x.Vwap
	}
	return 0
}

func (x *Position) GetVwapDiluted() float64 {
	if x != nil {
		return x.VwapDiluted
	}
	return 0
}

func (x *Position) GetVwapOpen() float64 {
	if x != nil {
		return x.VwapOpen
	}
	return 0
}

func (x *Position) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Position) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Position) GetFpnl() float64 {
	if x != nil {
		return x.Fpnl
	}
	return 0
}

func (x *Position) GetFpnlOpen() float64 {
	if x != nil {
		return x.FpnlOpen
	}
	return 0
}

func (x *Position) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Position) GetOrderFrozen() int64 {
	if x != nil {
		return x.OrderFrozen
	}
	return 0
}

func (x *Position) GetOrderFrozenToday() int64 {
	if x != nil {
		return x.OrderFrozenToday
	}
	return 0
}

func (x *Position) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *Position) GetAvailableToday() int64 {
	if x != nil {
		return x.AvailableToday
	}
	return 0
}

func (x *Position) GetAvailableNow() int64 {
	if x != nil {
		return x.AvailableNow
	}
	return 0
}

func (x *Position) GetMarketValue() float64 {
	if x != nil {
		return x.MarketValue
	}
	return 0
}

func (x *Position) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *Position) GetLastVolume() int64 {
	if x != nil {
		return x.LastVolume
	}
	return 0
}

func (x *Position) GetLastInout() int64 {
	if x != nil {
		return x.LastInout
	}
	return 0
}

func (x *Position) GetChangeReason() int32 {
	if x != nil {
		return x.ChangeReason
	}
	return 0
}

func (x *Position) GetChangeEventId() string {
	if x != nil {
		return x.ChangeEventId
	}
	return ""
}

func (x *Position) GetHasDividend() int32 {
	if x != nil {
		return x.HasDividend
	}
	return 0
}

func (x *Position) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Position) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`       //账号ID
	AccountName string `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"` //账户登录名
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                //账号名称
	Intro       string `protobuf:"bytes,4,opt,name=intro,proto3" json:"intro,omitempty"`                                //账号描述
	Comment     string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`                            //账号备注
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{11}
}

func (x *Account) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Account) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *Account) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Account) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *Account) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type AccountStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`       //账号ID
	AccountName string `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"` //账户登录名
	State       int32  `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`                               //账户状态
	ErrorCode   int32  `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`      //错误码
	ErrorMsg    string `protobuf:"bytes,5,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`          //错误信息
}

func (x *AccountStatus) Reset() {
	*x = AccountStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStatus) ProtoMessage() {}

func (x *AccountStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStatus.ProtoReflect.Descriptor instead.
func (*AccountStatus) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{12}
}

func (x *AccountStatus) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountStatus) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AccountStatus) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *AccountStatus) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *AccountStatus) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`            //参数键
	Value    float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`      //参数值
	Min      float64 `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`          //可设置的最小值
	Max      float64 `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`          //可设置的最大值
	Name     string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`          //参数名
	Intro    string  `protobuf:"bytes,6,opt,name=intro,proto3" json:"intro,omitempty"`        //参数说明
	Group    string  `protobuf:"bytes,7,opt,name=group,proto3" json:"group,omitempty"`        //组名
	Readonly bool    `protobuf:"varint,8,opt,name=readonly,proto3" json:"readonly,omitempty"` //是否只读
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{13}
}

func (x *Parameter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Parameter) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Parameter) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Parameter) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Parameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Parameter) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *Parameter) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Parameter) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

type Indicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      string  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                    //账号ID
	PnlRatio       float64 `protobuf:"fixed64,2,opt,name=pnl_ratio,json=pnlRatio,proto3" json:"pnl_ratio,omitempty"`                     //累计收益率(pnl/cum_inout)
	PnlRatioAnnual float64 `protobuf:"fixed64,3,opt,name=pnl_ratio_annual,json=pnlRatioAnnual,proto3" json:"pnl_ratio_annual,omitempty"` //年化收益率
	SharpRatio     float64 `protobuf:"fixed64,4,opt,name=sharp_ratio,json=sharpRatio,proto3" json:"sharp_ratio,omitempty"`               //夏普比率
	MaxDrawdown    float64 `protobuf:"fixed64,5,opt,name=max_drawdown,json=maxDrawdown,proto3" json:"max_drawdown,omitempty"`            //最大回撤
	RiskRatio      float64 `protobuf:"fixed64,6,opt,name=risk_ratio,json=riskRatio,proto3" json:"risk_ratio,omitempty"`                  //风险比率
	OpenCount      int32   `protobuf:"varint,7,opt,name=open_count,json=openCount,proto3" json:"open_count,omitempty"`                   //开仓次数
	CloseCount     int32   `protobuf:"varint,8,opt,name=close_count,json=closeCount,proto3" json:"close_count,omitempty"`                //平仓次数
	WinCount       int32   `protobuf:"varint,9,opt,name=win_count,json=winCount,proto3" json:"win_count,omitempty"`                      //盈利次数
	LoseCount      int32   `protobuf:"varint,10,opt,name=lose_count,json=loseCount,proto3" json:"lose_count,omitempty"`                  //亏损次数
	WinRatio       float64 `protobuf:"fixed64,11,opt,name=win_ratio,json=winRatio,proto3" json:"win_ratio,omitempty"`                    //胜率
	CreatedAt      int64   `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  //指标创建时间
	UpdatedAt      int64   `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                  //指标变更时间
}

func (x *Indicator) Reset() {
	*x = Indicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Indicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indicator) ProtoMessage() {}

func (x *Indicator) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indicator.ProtoReflect.Descriptor instead.
func (*Indicator) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{14}
}

func (x *Indicator) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Indicator) GetPnlRatio() float64 {
	if x != nil {
		return x.PnlRatio
	}
	return 0
}

func (x *Indicator) GetPnlRatioAnnual() float64 {
	if x != nil {
		return x.PnlRatioAnnual
	}
	return 0
}

func (x *Indicator) GetSharpRatio() float64 {
	if x != nil {
		return x.SharpRatio
	}
	return 0
}

func (x *Indicator) GetMaxDrawdown() float64 {
	if x != nil {
		return x.MaxDrawdown
	}
	return 0
}

func (x *Indicator) GetRiskRatio() float64 {
	if x != nil {
		return x.RiskRatio
	}
	return 0
}

func (x *Indicator) GetOpenCount() int32 {
	if x != nil {
		return x.OpenCount
	}
	return 0
}

func (x *Indicator) GetCloseCount() int32 {
	if x != nil {
		return x.CloseCount
	}
	return 0
}

func (x *Indicator) GetWinCount() int32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

func (x *Indicator) GetLoseCount() int32 {
	if x != nil {
		return x.LoseCount
	}
	return 0
}

func (x *Indicator) GetWinRatio() float64 {
	if x != nil {
		return x.WinRatio
	}
	return 0
}

func (x *Indicator) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Indicator) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CollateralInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                             //担保证券标的
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                 //名称
	PledgeRate float64 `protobuf:"fixed64,3,opt,name=pledge_rate,json=pledgeRate,proto3" json:"pledge_rate,omitempty"` //折算率
}

func (x *CollateralInstrument) Reset() {
	*x = CollateralInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollateralInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollateralInstrument) ProtoMessage() {}

func (x *CollateralInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollateralInstrument.ProtoReflect.Descriptor instead.
func (*CollateralInstrument) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{15}
}

func (x *CollateralInstrument) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CollateralInstrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollateralInstrument) GetPledgeRate() float64 {
	if x != nil {
		return x.PledgeRate
	}
	return 0
}

type BorrowableInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol                string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                  //可融证券标的
	Name                  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                      //名称
	MarginRateForCash     float64 `protobuf:"fixed64,3,opt,name=margin_rate_for_cash,json=marginRateForCash,proto3" json:"margin_rate_for_cash,omitempty"`             //融资保证金比率
	MarginRateForSecurity float64 `protobuf:"fixed64,4,opt,name=margin_rate_for_security,json=marginRateForSecurity,proto3" json:"margin_rate_for_security,omitempty"` //融券保证金比率
}

func (x *BorrowableInstrument) Reset() {
	*x = BorrowableInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BorrowableInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BorrowableInstrument) ProtoMessage() {}

func (x *BorrowableInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BorrowableInstrument.ProtoReflect.Descriptor instead.
func (*BorrowableInstrument) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{16}
}

func (x *BorrowableInstrument) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BorrowableInstrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BorrowableInstrument) GetMarginRateForCash() float64 {
	if x != nil {
		return x.MarginRateForCash
	}
	return 0
}

func (x *BorrowableInstrument) GetMarginRateForSecurity() float64 {
	if x != nil {
		return x.MarginRateForSecurity
	}
	return 0
}

type BorrowableInstrumentPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`         //可融证券标的
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`             //名称
	Balance   float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`     //证券余额
	Available float64 `protobuf:"fixed64,4,opt,name=available,proto3" json:"available,omitempty"` //证券可用
}

func (x *BorrowableInstrumentPosition) Reset() {
	*x = BorrowableInstrumentPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BorrowableInstrumentPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BorrowableInstrumentPosition) ProtoMessage() {}

func (x *BorrowableInstrumentPosition) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BorrowableInstrumentPosition.ProtoReflect.Descriptor instead.
func (*BorrowableInstrumentPosition) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{17}
}

func (x *BorrowableInstrumentPosition) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BorrowableInstrumentPosition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BorrowableInstrumentPosition) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *BorrowableInstrumentPosition) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

type CreditContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                                             //证券代码 stkcode
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                 //名称
	Orderdate        int32   `protobuf:"varint,3,opt,name=orderdate,proto3" json:"orderdate,omitempty"`                                      //委托日期
	Ordersno         string  `protobuf:"bytes,4,opt,name=ordersno,proto3" json:"ordersno,omitempty"`                                         //委 托 号
	Creditdirect     string  `protobuf:"bytes,5,opt,name=creditdirect,proto3" json:"creditdirect,omitempty"`                                 //融资融券方向
	Orderqty         float64 `protobuf:"fixed64,6,opt,name=orderqty,proto3" json:"orderqty,omitempty"`                                       //委托数量
	Matchqty         float64 `protobuf:"fixed64,7,opt,name=matchqty,proto3" json:"matchqty,omitempty"`                                       //成交数量
	Orderamt         float64 `protobuf:"fixed64,8,opt,name=orderamt,proto3" json:"orderamt,omitempty"`                                       //委托金额
	Orderfrzamt      float64 `protobuf:"fixed64,9,opt,name=orderfrzamt,proto3" json:"orderfrzamt,omitempty"`                                 //委托冻结金额
	Matchamt         float64 `protobuf:"fixed64,10,opt,name=matchamt,proto3" json:"matchamt,omitempty"`                                      //成交金额
	Clearamt         float64 `protobuf:"fixed64,11,opt,name=clearamt,proto3" json:"clearamt,omitempty"`                                      //清算金额
	Lifestatus       string  `protobuf:"bytes,12,opt,name=lifestatus,proto3" json:"lifestatus,omitempty"`                                    //合约状态
	Enddate          int32   `protobuf:"varint,13,opt,name=enddate,proto3" json:"enddate,omitempty"`                                         //负债截止日期
	Oldenddate       int32   `protobuf:"varint,14,opt,name=oldenddate,proto3" json:"oldenddate,omitempty"`                                   //原始的负债截止日期
	Creditrepay      float64 `protobuf:"fixed64,15,opt,name=creditrepay,proto3" json:"creditrepay,omitempty"`                                // T日之前归还金额
	Creditrepayunfrz float64 `protobuf:"fixed64,16,opt,name=creditrepayunfrz,proto3" json:"creditrepayunfrz,omitempty"`                      // T日归还金额
	Fundremain       float64 `protobuf:"fixed64,17,opt,name=fundremain,proto3" json:"fundremain,omitempty"`                                  //应还金额
	Stkrepay         float64 `protobuf:"fixed64,18,opt,name=stkrepay,proto3" json:"stkrepay,omitempty"`                                      // T日之前归还数量
	Stkrepayunfrz    float64 `protobuf:"fixed64,19,opt,name=stkrepayunfrz,proto3" json:"stkrepayunfrz,omitempty"`                            // T日归还数量
	Stkremain        float64 `protobuf:"fixed64,20,opt,name=stkremain,proto3" json:"stkremain,omitempty"`                                    //应还证券数量
	Stkremainvalue   float64 `protobuf:"fixed64,21,opt,name=stkremainvalue,proto3" json:"stkremainvalue,omitempty"`                          //应还证券市值
	Fee              float64 `protobuf:"fixed64,22,opt,name=fee,proto3" json:"fee,omitempty"`                                                //融资融券息、费
	Overduefee       float64 `protobuf:"fixed64,23,opt,name=overduefee,proto3" json:"overduefee,omitempty"`                                  //逾期未偿还息、费
	FeeRepay         float64 `protobuf:"fixed64,24,opt,name=fee_repay,json=feeRepay,proto3" json:"fee_repay,omitempty"`                      //己偿还息、费
	Punifee          float64 `protobuf:"fixed64,25,opt,name=punifee,proto3" json:"punifee,omitempty"`                                        //利息产生的罚息
	PunifeeRepay     float64 `protobuf:"fixed64,26,opt,name=punifee_repay,json=punifeeRepay,proto3" json:"punifee_repay,omitempty"`          //己偿还罚息
	Rights           float64 `protobuf:"fixed64,27,opt,name=rights,proto3" json:"rights,omitempty"`                                          //未偿还权益金额
	Overduerights    float64 `protobuf:"fixed64,28,opt,name=overduerights,proto3" json:"overduerights,omitempty"`                            //逾期未偿还权益
	RightsRepay      float64 `protobuf:"fixed64,29,opt,name=rights_repay,json=rightsRepay,proto3" json:"rights_repay,omitempty"`             //己偿还权益
	Lastprice        float64 `protobuf:"fixed64,30,opt,name=lastprice,proto3" json:"lastprice,omitempty"`                                    //最新价
	Profitcost       float64 `protobuf:"fixed64,31,opt,name=profitcost,proto3" json:"profitcost,omitempty"`                                  //浮动盈亏
	Sysdate          int32   `protobuf:"varint,32,opt,name=sysdate,proto3" json:"sysdate,omitempty"`                                         //系统日期
	Sno              string  `protobuf:"bytes,33,opt,name=sno,proto3" json:"sno,omitempty"`                                                  //合约编号
	Lastdate         int32   `protobuf:"varint,34,opt,name=lastdate,proto3" json:"lastdate,omitempty"`                                       //最后一次计算息费日期
	Closedate        int32   `protobuf:"varint,35,opt,name=closedate,proto3" json:"closedate,omitempty"`                                     //合约全部偿还日期
	Punidebts        float64 `protobuf:"fixed64,36,opt,name=punidebts,proto3" json:"punidebts,omitempty"`                                    //逾期本金罚息
	PunidebtsRepay   float64 `protobuf:"fixed64,37,opt,name=punidebts_repay,json=punidebtsRepay,proto3" json:"punidebts_repay,omitempty"`    //本金罚息偿还
	Punidebtsunfrz   float64 `protobuf:"fixed64,38,opt,name=punidebtsunfrz,proto3" json:"punidebtsunfrz,omitempty"`                          //逾期本金罚息
	Punifeeunfrz     float64 `protobuf:"fixed64,39,opt,name=punifeeunfrz,proto3" json:"punifeeunfrz,omitempty"`                              //逾期息费罚息
	Punirights       float64 `protobuf:"fixed64,40,opt,name=punirights,proto3" json:"punirights,omitempty"`                                  //逾期权益罚息
	PunirightsRepay  float64 `protobuf:"fixed64,41,opt,name=punirights_repay,json=punirightsRepay,proto3" json:"punirights_repay,omitempty"` //权益罚息偿还
	Punirightsunfrz  float64 `protobuf:"fixed64,42,opt,name=punirightsunfrz,proto3" json:"punirightsunfrz,omitempty"`                        //逾期权益罚息
	Feeunfrz         float64 `protobuf:"fixed64,43,opt,name=feeunfrz,proto3" json:"feeunfrz,omitempty"`                                      //实时偿还利息
	Overduefeeunfrz  float64 `protobuf:"fixed64,44,opt,name=overduefeeunfrz,proto3" json:"overduefeeunfrz,omitempty"`                        //实时偿还逾期利息
	Rightsqty        float64 `protobuf:"fixed64,45,opt,name=rightsqty,proto3" json:"rightsqty,omitempty"`                                    //未偿还权益数量
	Overduerightsqty float64 `protobuf:"fixed64,46,opt,name=overduerightsqty,proto3" json:"overduerightsqty,omitempty"`                      //逾期未偿还权益数量
}

func (x *CreditContract) Reset() {
	*x = CreditContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditContract) ProtoMessage() {}

func (x *CreditContract) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditContract.ProtoReflect.Descriptor instead.
func (*CreditContract) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{18}
}

func (x *CreditContract) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreditContract) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreditContract) GetOrderdate() int32 {
	if x != nil {
		return x.Orderdate
	}
	return 0
}

func (x *CreditContract) GetOrdersno() string {
	if x != nil {
		return x.Ordersno
	}
	return ""
}

func (x *CreditContract) GetCreditdirect() string {
	if x != nil {
		return x.Creditdirect
	}
	return ""
}

func (x *CreditContract) GetOrderqty() float64 {
	if x != nil {
		return x.Orderqty
	}
	return 0
}

func (x *CreditContract) GetMatchqty() float64 {
	if x != nil {
		return x.Matchqty
	}
	return 0
}

func (x *CreditContract) GetOrderamt() float64 {
	if x != nil {
		return x.Orderamt
	}
	return 0
}

func (x *CreditContract) GetOrderfrzamt() float64 {
	if x != nil {
		return x.Orderfrzamt
	}
	return 0
}

func (x *CreditContract) GetMatchamt() float64 {
	if x != nil {
		return x.Matchamt
	}
	return 0
}

func (x *CreditContract) GetClearamt() float64 {
	if x != nil {
		return x.Clearamt
	}
	return 0
}

func (x *CreditContract) GetLifestatus() string {
	if x != nil {
		return x.Lifestatus
	}
	return ""
}

func (x *CreditContract) GetEnddate() int32 {
	if x != nil {
		return x.Enddate
	}
	return 0
}

func (x *CreditContract) GetOldenddate() int32 {
	if x != nil {
		return x.Oldenddate
	}
	return 0
}

func (x *CreditContract) GetCreditrepay() float64 {
	if x != nil {
		return x.Creditrepay
	}
	return 0
}

func (x *CreditContract) GetCreditrepayunfrz() float64 {
	if x != nil {
		return x.Creditrepayunfrz
	}
	return 0
}

func (x *CreditContract) GetFundremain() float64 {
	if x != nil {
		return x.Fundremain
	}
	return 0
}

func (x *CreditContract) GetStkrepay() float64 {
	if x != nil {
		return x.Stkrepay
	}
	return 0
}

func (x *CreditContract) GetStkrepayunfrz() float64 {
	if x != nil {
		return x.Stkrepayunfrz
	}
	return 0
}

func (x *CreditContract) GetStkremain() float64 {
	if x != nil {
		return x.Stkremain
	}
	return 0
}

func (x *CreditContract) GetStkremainvalue() float64 {
	if x != nil {
		return x.Stkremainvalue
	}
	return 0
}

func (x *CreditContract) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *CreditContract) GetOverduefee() float64 {
	if x != nil {
		return x.Overduefee
	}
	return 0
}

func (x *CreditContract) GetFeeRepay() float64 {
	if x != nil {
		return x.FeeRepay
	}
	return 0
}

func (x *CreditContract) GetPunifee() float64 {
	if x != nil {
		return x.Punifee
	}
	return 0
}

func (x *CreditContract) GetPunifeeRepay() float64 {
	if x != nil {
		return x.PunifeeRepay
	}
	return 0
}

func (x *CreditContract) GetRights() float64 {
	if x != nil {
		return x.Rights
	}
	return 0
}

func (x *CreditContract) GetOverduerights() float64 {
	if x != nil {
		return x.Overduerights
	}
	return 0
}

func (x *CreditContract) GetRightsRepay() float64 {
	if x != nil {
		return x.RightsRepay
	}
	return 0
}

func (x *CreditContract) GetLastprice() float64 {
	if x != nil {
		return x.Lastprice
	}
	return 0
}

func (x *CreditContract) GetProfitcost() float64 {
	if x != nil {
		return x.Profitcost
	}
	return 0
}

func (x *CreditContract) GetSysdate() int32 {
	if x != nil {
		return x.Sysdate
	}
	return 0
}

func (x *CreditContract) GetSno() string {
	if x != nil {
		return x.Sno
	}
	return ""
}

func (x *CreditContract) GetLastdate() int32 {
	if x != nil {
		return x.Lastdate
	}
	return 0
}

func (x *CreditContract) GetClosedate() int32 {
	if x != nil {
		return x.Closedate
	}
	return 0
}

func (x *CreditContract) GetPunidebts() float64 {
	if x != nil {
		return x.Punidebts
	}
	return 0
}

func (x *CreditContract) GetPunidebtsRepay() float64 {
	if x != nil {
		return x.PunidebtsRepay
	}
	return 0
}

func (x *CreditContract) GetPunidebtsunfrz() float64 {
	if x != nil {
		return x.Punidebtsunfrz
	}
	return 0
}

func (x *CreditContract) GetPunifeeunfrz() float64 {
	if x != nil {
		return x.Punifeeunfrz
	}
	return 0
}

func (x *CreditContract) GetPunirights() float64 {
	if x != nil {
		return x.Punirights
	}
	return 0
}

func (x *CreditContract) GetPunirightsRepay() float64 {
	if x != nil {
		return x.PunirightsRepay
	}
	return 0
}

func (x *CreditContract) GetPunirightsunfrz() float64 {
	if x != nil {
		return x.Punirightsunfrz
	}
	return 0
}

func (x *CreditContract) GetFeeunfrz() float64 {
	if x != nil {
		return x.Feeunfrz
	}
	return 0
}

func (x *CreditContract) GetOverduefeeunfrz() float64 {
	if x != nil {
		return x.Overduefeeunfrz
	}
	return 0
}

func (x *CreditContract) GetRightsqty() float64 {
	if x != nil {
		return x.Rightsqty
	}
	return 0
}

func (x *CreditContract) GetOverduerightsqty() float64 {
	if x != nil {
		return x.Overduerightsqty
	}
	return 0
}

type CreditCash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fundint32Rrate           float64 `protobuf:"fixed64,1,opt,name=fundint32rrate,proto3" json:"fundint32rrate,omitempty"`                      //融资利率
	Stkint32Rrate            float64 `protobuf:"fixed64,2,opt,name=stkint32rrate,proto3" json:"stkint32rrate,omitempty"`                        //融券利率
	Punishint32Rrate         float64 `protobuf:"fixed64,3,opt,name=punishint32rrate,proto3" json:"punishint32rrate,omitempty"`                  //罚息利率
	Creditstatus             string  `protobuf:"bytes,4,opt,name=creditstatus,proto3" json:"creditstatus,omitempty"`                            //信用状态
	Marginrates              float64 `protobuf:"fixed64,5,opt,name=marginrates,proto3" json:"marginrates,omitempty"`                            //维持担保比例
	Realrate                 float64 `protobuf:"fixed64,6,opt,name=realrate,proto3" json:"realrate,omitempty"`                                  //实时担保比例
	Asset                    float64 `protobuf:"fixed64,7,opt,name=asset,proto3" json:"asset,omitempty"`                                        //总资产
	Liability                float64 `protobuf:"fixed64,8,opt,name=liability,proto3" json:"liability,omitempty"`                                //总负债
	Marginavl                float64 `protobuf:"fixed64,9,opt,name=marginavl,proto3" json:"marginavl,omitempty"`                                //保证金可用数
	Fundbal                  float64 `protobuf:"fixed64,10,opt,name=fundbal,proto3" json:"fundbal,omitempty"`                                   //资金余额
	Fundavl                  float64 `protobuf:"fixed64,11,opt,name=fundavl,proto3" json:"fundavl,omitempty"`                                   //资金可用数
	Dsaleamtbal              float64 `protobuf:"fixed64,12,opt,name=dsaleamtbal,proto3" json:"dsaleamtbal,omitempty"`                           //融券卖出所得资金
	Guaranteeout             float64 `protobuf:"fixed64,13,opt,name=guaranteeout,proto3" json:"guaranteeout,omitempty"`                         //可转出担保资产
	Gagemktavl               float64 `protobuf:"fixed64,14,opt,name=gagemktavl,proto3" json:"gagemktavl,omitempty"`                             //担保证券市值
	Fdealavl                 float64 `protobuf:"fixed64,15,opt,name=fdealavl,proto3" json:"fdealavl,omitempty"`                                 //融资本金
	Ffee                     float64 `protobuf:"fixed64,16,opt,name=ffee,proto3" json:"ffee,omitempty"`                                         //融资息费
	Ftotaldebts              float64 `protobuf:"fixed64,17,opt,name=ftotaldebts,proto3" json:"ftotaldebts,omitempty"`                           //融资负债合计
	Dealfmktavl              float64 `protobuf:"fixed64,18,opt,name=dealfmktavl,proto3" json:"dealfmktavl,omitempty"`                           //应付融券市值
	Dfee                     float64 `protobuf:"fixed64,19,opt,name=dfee,proto3" json:"dfee,omitempty"`                                         //融券息费
	Dtotaldebts              float64 `protobuf:"fixed64,20,opt,name=dtotaldebts,proto3" json:"dtotaldebts,omitempty"`                           //融券负债合计
	Fcreditbal               float64 `protobuf:"fixed64,21,opt,name=fcreditbal,proto3" json:"fcreditbal,omitempty"`                             //融资授信额度
	Fcreditavl               float64 `protobuf:"fixed64,22,opt,name=fcreditavl,proto3" json:"fcreditavl,omitempty"`                             //融资可用额度
	Fcreditfrz               float64 `protobuf:"fixed64,23,opt,name=fcreditfrz,proto3" json:"fcreditfrz,omitempty"`                             //融资额度冻结
	Dcreditbal               float64 `protobuf:"fixed64,24,opt,name=dcreditbal,proto3" json:"dcreditbal,omitempty"`                             //融券授信额度
	Dcreditavl               float64 `protobuf:"fixed64,25,opt,name=dcreditavl,proto3" json:"dcreditavl,omitempty"`                             //融券可用额度
	Dcreditfrz               float64 `protobuf:"fixed64,26,opt,name=dcreditfrz,proto3" json:"dcreditfrz,omitempty"`                             //融券额度冻结
	Rights                   float64 `protobuf:"fixed64,27,opt,name=rights,proto3" json:"rights,omitempty"`                                     //红利权益
	Serviceuncomerqrights    float64 `protobuf:"fixed64,28,opt,name=serviceuncomerqrights,proto3" json:"serviceuncomerqrights,omitempty"`       //红利权益(在途)
	Rightsqty                float64 `protobuf:"fixed64,29,opt,name=rightsqty,proto3" json:"rightsqty,omitempty"`                               //红股权益
	Serviceuncomerqrightsqty float64 `protobuf:"fixed64,30,opt,name=serviceuncomerqrightsqty,proto3" json:"serviceuncomerqrightsqty,omitempty"` //红股权益(在途)
	Acreditbal               float64 `protobuf:"fixed64,31,opt,name=acreditbal,proto3" json:"acreditbal,omitempty"`                             //总额度
	Acreditavl               float64 `protobuf:"fixed64,32,opt,name=acreditavl,proto3" json:"acreditavl,omitempty"`                             //总可用额度
	Acashcapital             float64 `protobuf:"fixed64,33,opt,name=acashcapital,proto3" json:"acashcapital,omitempty"`                         //所有现金资产（所有资产、包括融券卖出）
	Astkmktvalue             float64 `protobuf:"fixed64,34,opt,name=astkmktvalue,proto3" json:"astkmktvalue,omitempty"`                         //所有证券市值（包含融资买入、非担保品）
	Withdrawable             float64 `protobuf:"fixed64,35,opt,name=withdrawable,proto3" json:"withdrawable,omitempty"`                         //可取资金
	Netcapital               float64 `protobuf:"fixed64,36,opt,name=netcapital,proto3" json:"netcapital,omitempty"`                             //净资产
	Fcreditpnl               float64 `protobuf:"fixed64,37,opt,name=fcreditpnl,proto3" json:"fcreditpnl,omitempty"`                             //融资盈亏
	Dcreditpnl               float64 `protobuf:"fixed64,38,opt,name=dcreditpnl,proto3" json:"dcreditpnl,omitempty"`                             //融券盈亏
	Fcreditmarginoccupied    float64 `protobuf:"fixed64,39,opt,name=fcreditmarginoccupied,proto3" json:"fcreditmarginoccupied,omitempty"`       //融资占用保证金
	Dcreditmarginoccupied    float64 `protobuf:"fixed64,40,opt,name=dcreditmarginoccupied,proto3" json:"dcreditmarginoccupied,omitempty"`       //融券占用保证金
	Collateralbuyableamt     float64 `protobuf:"fixed64,41,opt,name=collateralbuyableamt,proto3" json:"collateralbuyableamt,omitempty"`         //可买担保品资金
	Repayableamt             float64 `protobuf:"fixed64,42,opt,name=repayableamt,proto3" json:"repayableamt,omitempty"`                         //可还款金额
	Dcreditcashavl           float64 `protobuf:"fixed64,43,opt,name=dcreditcashavl,proto3" json:"dcreditcashavl,omitempty"`                     //融券可用资金
}

func (x *CreditCash) Reset() {
	*x = CreditCash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditCash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditCash) ProtoMessage() {}

func (x *CreditCash) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditCash.ProtoReflect.Descriptor instead.
func (*CreditCash) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{19}
}

func (x *CreditCash) GetFundint32Rrate() float64 {
	if x != nil {
		return x.Fundint32Rrate
	}
	return 0
}

func (x *CreditCash) GetStkint32Rrate() float64 {
	if x != nil {
		return x.Stkint32Rrate
	}
	return 0
}

func (x *CreditCash) GetPunishint32Rrate() float64 {
	if x != nil {
		return x.Punishint32Rrate
	}
	return 0
}

func (x *CreditCash) GetCreditstatus() string {
	if x != nil {
		return x.Creditstatus
	}
	return ""
}

func (x *CreditCash) GetMarginrates() float64 {
	if x != nil {
		return x.Marginrates
	}
	return 0
}

func (x *CreditCash) GetRealrate() float64 {
	if x != nil {
		return x.Realrate
	}
	return 0
}

func (x *CreditCash) GetAsset() float64 {
	if x != nil {
		return x.Asset
	}
	return 0
}

func (x *CreditCash) GetLiability() float64 {
	if x != nil {
		return x.Liability
	}
	return 0
}

func (x *CreditCash) GetMarginavl() float64 {
	if x != nil {
		return x.Marginavl
	}
	return 0
}

func (x *CreditCash) GetFundbal() float64 {
	if x != nil {
		return x.Fundbal
	}
	return 0
}

func (x *CreditCash) GetFundavl() float64 {
	if x != nil {
		return x.Fundavl
	}
	return 0
}

func (x *CreditCash) GetDsaleamtbal() float64 {
	if x != nil {
		return x.Dsaleamtbal
	}
	return 0
}

func (x *CreditCash) GetGuaranteeout() float64 {
	if x != nil {
		return x.Guaranteeout
	}
	return 0
}

func (x *CreditCash) GetGagemktavl() float64 {
	if x != nil {
		return x.Gagemktavl
	}
	return 0
}

func (x *CreditCash) GetFdealavl() float64 {
	if x != nil {
		return x.Fdealavl
	}
	return 0
}

func (x *CreditCash) GetFfee() float64 {
	if x != nil {
		return x.Ffee
	}
	return 0
}

func (x *CreditCash) GetFtotaldebts() float64 {
	if x != nil {
		return x.Ftotaldebts
	}
	return 0
}

func (x *CreditCash) GetDealfmktavl() float64 {
	if x != nil {
		return x.Dealfmktavl
	}
	return 0
}

func (x *CreditCash) GetDfee() float64 {
	if x != nil {
		return x.Dfee
	}
	return 0
}

func (x *CreditCash) GetDtotaldebts() float64 {
	if x != nil {
		return x.Dtotaldebts
	}
	return 0
}

func (x *CreditCash) GetFcreditbal() float64 {
	if x != nil {
		return x.Fcreditbal
	}
	return 0
}

func (x *CreditCash) GetFcreditavl() float64 {
	if x != nil {
		return x.Fcreditavl
	}
	return 0
}

func (x *CreditCash) GetFcreditfrz() float64 {
	if x != nil {
		return x.Fcreditfrz
	}
	return 0
}

func (x *CreditCash) GetDcreditbal() float64 {
	if x != nil {
		return x.Dcreditbal
	}
	return 0
}

func (x *CreditCash) GetDcreditavl() float64 {
	if x != nil {
		return x.Dcreditavl
	}
	return 0
}

func (x *CreditCash) GetDcreditfrz() float64 {
	if x != nil {
		return x.Dcreditfrz
	}
	return 0
}

func (x *CreditCash) GetRights() float64 {
	if x != nil {
		return x.Rights
	}
	return 0
}

func (x *CreditCash) GetServiceuncomerqrights() float64 {
	if x != nil {
		return x.Serviceuncomerqrights
	}
	return 0
}

func (x *CreditCash) GetRightsqty() float64 {
	if x != nil {
		return x.Rightsqty
	}
	return 0
}

func (x *CreditCash) GetServiceuncomerqrightsqty() float64 {
	if x != nil {
		return x.Serviceuncomerqrightsqty
	}
	return 0
}

func (x *CreditCash) GetAcreditbal() float64 {
	if x != nil {
		return x.Acreditbal
	}
	return 0
}

func (x *CreditCash) GetAcreditavl() float64 {
	if x != nil {
		return x.Acreditavl
	}
	return 0
}

func (x *CreditCash) GetAcashcapital() float64 {
	if x != nil {
		return x.Acashcapital
	}
	return 0
}

func (x *CreditCash) GetAstkmktvalue() float64 {
	if x != nil {
		return x.Astkmktvalue
	}
	return 0
}

func (x *CreditCash) GetWithdrawable() float64 {
	if x != nil {
		return x.Withdrawable
	}
	return 0
}

func (x *CreditCash) GetNetcapital() float64 {
	if x != nil {
		return x.Netcapital
	}
	return 0
}

func (x *CreditCash) GetFcreditpnl() float64 {
	if x != nil {
		return x.Fcreditpnl
	}
	return 0
}

func (x *CreditCash) GetDcreditpnl() float64 {
	if x != nil {
		return x.Dcreditpnl
	}
	return 0
}

func (x *CreditCash) GetFcreditmarginoccupied() float64 {
	if x != nil {
		return x.Fcreditmarginoccupied
	}
	return 0
}

func (x *CreditCash) GetDcreditmarginoccupied() float64 {
	if x != nil {
		return x.Dcreditmarginoccupied
	}
	return 0
}

func (x *CreditCash) GetCollateralbuyableamt() float64 {
	if x != nil {
		return x.Collateralbuyableamt
	}
	return 0
}

func (x *CreditCash) GetRepayableamt() float64 {
	if x != nil {
		return x.Repayableamt
	}
	return 0
}

func (x *CreditCash) GetDcreditcashavl() float64 {
	if x != nil {
		return x.Dcreditcashavl
	}
	return 0
}

// 新股申购额度
type IPOQI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange     string  `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`                                 //市场代码
	Quota        float64 `protobuf:"fixed64,2,opt,name=quota,proto3" json:"quota,omitempty"`                                     //市场配额
	SseStarQuota float64 `protobuf:"fixed64,3,opt,name=sse_star_quota,json=sseStarQuota,proto3" json:"sse_star_quota,omitempty"` //上海科创板配额
}

func (x *IPOQI) Reset() {
	*x = IPOQI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPOQI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPOQI) ProtoMessage() {}

func (x *IPOQI) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPOQI.ProtoReflect.Descriptor instead.
func (*IPOQI) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{20}
}

func (x *IPOQI) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *IPOQI) GetQuota() float64 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *IPOQI) GetSseStarQuota() float64 {
	if x != nil {
		return x.SseStarQuota
	}
	return 0
}

type IPOInstruments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                //申购新股symbol
	Price  float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`                //申购价格
	MinVol int32   `protobuf:"varint,3,opt,name=min_vol,json=minVol,proto3" json:"min_vol,omitempty"` //申购最小数量
	MaxVol int32   `protobuf:"varint,4,opt,name=max_vol,json=maxVol,proto3" json:"max_vol,omitempty"` //申购最大数量
}

func (x *IPOInstruments) Reset() {
	*x = IPOInstruments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPOInstruments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPOInstruments) ProtoMessage() {}

func (x *IPOInstruments) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPOInstruments.ProtoReflect.Descriptor instead.
func (*IPOInstruments) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{21}
}

func (x *IPOInstruments) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *IPOInstruments) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *IPOInstruments) GetMinVol() int32 {
	if x != nil {
		return x.MinVol
	}
	return 0
}

func (x *IPOInstruments) GetMaxVol() int32 {
	if x != nil {
		return x.MaxVol
	}
	return 0
}

type IPOMatchNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId     string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`             //委托号
	Symbol      string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                              //新股symbol
	Volume      int32  `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`                             //成交数量
	MatchNumber string `protobuf:"bytes,4,opt,name=match_number,json=matchNumber,proto3" json:"match_number,omitempty"` //申购配号
	OrderAt     int32  `protobuf:"varint,5,opt,name=order_at,json=orderAt,proto3" json:"order_at,omitempty"`            //委托日期
	MatchAt     int32  `protobuf:"varint,6,opt,name=match_at,json=matchAt,proto3" json:"match_at,omitempty"`            //配号日期
}

func (x *IPOMatchNumber) Reset() {
	*x = IPOMatchNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPOMatchNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPOMatchNumber) ProtoMessage() {}

func (x *IPOMatchNumber) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPOMatchNumber.ProtoReflect.Descriptor instead.
func (*IPOMatchNumber) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{22}
}

func (x *IPOMatchNumber) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *IPOMatchNumber) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *IPOMatchNumber) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *IPOMatchNumber) GetMatchNumber() string {
	if x != nil {
		return x.MatchNumber
	}
	return ""
}

func (x *IPOMatchNumber) GetOrderAt() int32 {
	if x != nil {
		return x.OrderAt
	}
	return 0
}

func (x *IPOMatchNumber) GetMatchAt() int32 {
	if x != nil {
		return x.MatchAt
	}
	return 0
}

type IPOLotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol       string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                                    //新股symbol
	OrderAt      int32   `protobuf:"varint,2,opt,name=order_at,json=orderAt,proto3" json:"order_at,omitempty"`                  //委托日期
	LotAt        int32   `protobuf:"varint,3,opt,name=lot_at,json=lotAt,proto3" json:"lot_at,omitempty"`                        //中签日期
	LotVolume    int32   `protobuf:"varint,4,opt,name=lot_volume,json=lotVolume,proto3" json:"lot_volume,omitempty"`            //中签数量
	GiveUpVolume int32   `protobuf:"varint,5,opt,name=give_up_volume,json=giveUpVolume,proto3" json:"give_up_volume,omitempty"` //放弃数量
	Price        float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`                                    //中签价格
	Amount       float64 `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`                                  //中签金额
	PayVolume    float64 `protobuf:"fixed64,8,opt,name=pay_volume,json=payVolume,proto3" json:"pay_volume,omitempty"`           //已缴款数量
	PayAmount    float64 `protobuf:"fixed64,9,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount,omitempty"`           //已缴款金额
}

func (x *IPOLotInfo) Reset() {
	*x = IPOLotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gmdef_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPOLotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPOLotInfo) ProtoMessage() {}

func (x *IPOLotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gmdef_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPOLotInfo.ProtoReflect.Descriptor instead.
func (*IPOLotInfo) Descriptor() ([]byte, []int) {
	return file_gmdef_proto_rawDescGZIP(), []int{23}
}

func (x *IPOLotInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *IPOLotInfo) GetOrderAt() int32 {
	if x != nil {
		return x.OrderAt
	}
	return 0
}

func (x *IPOLotInfo) GetLotAt() int32 {
	if x != nil {
		return x.LotAt
	}
	return 0
}

func (x *IPOLotInfo) GetLotVolume() int32 {
	if x != nil {
		return x.LotVolume
	}
	return 0
}

func (x *IPOLotInfo) GetGiveUpVolume() int32 {
	if x != nil {
		return x.GiveUpVolume
	}
	return 0
}

func (x *IPOLotInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *IPOLotInfo) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *IPOLotInfo) GetPayVolume() float64 {
	if x != nil {
		return x.PayVolume
	}
	return 0
}

func (x *IPOLotInfo) GetPayAmount() float64 {
	if x != nil {
		return x.PayAmount
	}
	return 0
}

var File_gmdef_proto protoreflect.FileDescriptor

var file_gmdef_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x67, 0x6d, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x67,
	0x6d, 0x73, 0x64, 0x6b, 0x22, 0x98, 0x02, 0x0a, 0x03, 0x42, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x62, 0x6f, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x7f, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x22, 0xf5, 0x02, 0x0a, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x77,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x75, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x75, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6d, 0x73, 0x64, 0x6b, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x0d, 0x4c, 0x32, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x64, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x62, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xc2, 0x01, 0x0a, 0x07, 0x4c, 0x32, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x4c, 0x32, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x85, 0x09, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x4f, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x65, 0x78,
	0x5f, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x78, 0x4f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x6c, 0x67, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x72, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x72, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x6a, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x6a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x5f,
	0x72, 0x65, 0x6a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x6a, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x77, 0x61, 0x70, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x77, 0x61, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe5,
	0x09, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x09, 0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x4f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x65, 0x78, 0x5f, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x4f, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x72, 0x63, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x72, 0x63, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x72, 0x63, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x72, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x6a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x6a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x6a, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x6a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x76, 0x77, 0x61, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x56, 0x77, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x66,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x67,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x67,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa0, 0x04, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x70, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x4f, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x6a, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x6a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x6a, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x6a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb9, 0x05, 0x0a, 0x04, 0x43, 0x61,
	0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x61, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6e,
	0x61, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6e, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x70, 0x6e, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x70, 0x6e, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x66, 0x70, 0x6e, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x63, 0x75, 0x6d, 0x49, 0x6e, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x6d, 0x5f,
	0x70, 0x6e, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x75, 0x6d, 0x50, 0x6e,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x75, 0x6d, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6e, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x6e, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe7, 0x06, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x77, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x77, 0x61, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x77, 0x61, 0x70, 0x44, 0x69, 0x6c, 0x75, 0x74,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x77, 0x61, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x77, 0x61, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x70, 0x6e, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x70, 0x6e,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x6e, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x70, 0x6e, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x77, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x6f, 0x75, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x6f, 0x75,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x91, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xb3, 0x01, 0x0a, 0x09, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x22,
	0xab, 0x03, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6e, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x70, 0x6e, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6e, 0x6c,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6e, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x41, 0x6e, 0x6e,
	0x75, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x70, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x70, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44,
	0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x69, 0x73,
	0x6b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x63, 0x0a,
	0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc3, 0x0b, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x6e, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x6e, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x71, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x71, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x71, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x61, 0x6d, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x61, 0x6d, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x66, 0x72, 0x7a, 0x61, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x66, 0x72, 0x7a, 0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x61, 0x6d, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6d,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6d,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x6c, 0x64, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x70, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x70, 0x61, 0x79, 0x75, 0x6e, 0x66, 0x72,
	0x7a, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x75, 0x6e, 0x66, 0x72, 0x7a, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6e,
	0x64, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66,
	0x75, 0x6e, 0x64, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6b,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6b,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6b, 0x72, 0x65, 0x70, 0x61,
	0x79, 0x75, 0x6e, 0x66, 0x72, 0x7a, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74,
	0x6b, 0x72, 0x65, 0x70, 0x61, 0x79, 0x75, 0x6e, 0x66, 0x72, 0x7a, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x6b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x6b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x6b,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x73, 0x74, 0x6b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x66, 0x65,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65,
	0x66, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x65, 0x65, 0x52, 0x65, 0x70, 0x61, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x6e, 0x69, 0x66, 0x65, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x70, 0x75, 0x6e, 0x69, 0x66, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75,
	0x6e, 0x69, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x70, 0x75, 0x6e, 0x69, 0x66, 0x65, 0x65, 0x52, 0x65, 0x70, 0x61, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x64,
	0x75, 0x65, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x70, 0x61, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x79, 0x73, 0x64, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x79, 0x73, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x6f, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x6e, 0x69, 0x64, 0x65, 0x62, 0x74,
	0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x75, 0x6e, 0x69, 0x64, 0x65, 0x62,
	0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x6e, 0x69, 0x64, 0x65, 0x62, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x75, 0x6e,
	0x69, 0x64, 0x65, 0x62, 0x74, 0x73, 0x52, 0x65, 0x70, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x75, 0x6e, 0x69, 0x64, 0x65, 0x62, 0x74, 0x73, 0x75, 0x6e, 0x66, 0x72, 0x7a, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x75, 0x6e, 0x69, 0x64, 0x65, 0x62, 0x74, 0x73, 0x75, 0x6e,
	0x66, 0x72, 0x7a, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x6e, 0x69, 0x66, 0x65, 0x65, 0x75, 0x6e,
	0x66, 0x72, 0x7a, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x75, 0x6e, 0x69, 0x66,
	0x65, 0x65, 0x75, 0x6e, 0x66, 0x72, 0x7a, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x6e, 0x69, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x75, 0x6e,
	0x69, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x6e, 0x69, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x70, 0x75, 0x6e, 0x69, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x61, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x6e, 0x69, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x75, 0x6e, 0x66, 0x72, 0x7a, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x75, 0x6e,
	0x69, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x75, 0x6e, 0x66, 0x72, 0x7a, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x65, 0x65, 0x75, 0x6e, 0x66, 0x72, 0x7a, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x66, 0x65, 0x65, 0x75, 0x6e, 0x66, 0x72, 0x7a, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72,
	0x64, 0x75, 0x65, 0x66, 0x65, 0x65, 0x75, 0x6e, 0x66, 0x72, 0x7a, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x66, 0x65, 0x65, 0x75, 0x6e, 0x66,
	0x72, 0x7a, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x71, 0x74, 0x79, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x71, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x71, 0x74, 0x79, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72,
	0x64, 0x75, 0x65, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x71, 0x74, 0x79, 0x22, 0xde, 0x0b, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x72, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x72, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x72,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x6b, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x72, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x72, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x72, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x61, 0x76, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x61, 0x76, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6e,
	0x64, 0x62, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64,
	0x62, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x76, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x76, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x6d, 0x74, 0x62, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x6d, 0x74, 0x62, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x6b, 0x74, 0x61, 0x76,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x6b, 0x74,
	0x61, 0x76, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x64, 0x65, 0x61, 0x6c, 0x61, 0x76, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x64, 0x65, 0x61, 0x6c, 0x61, 0x76, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x66, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66,
	0x66, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x64, 0x65, 0x62,
	0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x64, 0x65, 0x62, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x66, 0x6d, 0x6b,
	0x74, 0x61, 0x76, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x6c,
	0x66, 0x6d, 0x6b, 0x74, 0x61, 0x76, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x66, 0x65, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x66, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x64, 0x65, 0x62, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x64, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x64, 0x65, 0x62, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x62, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x66, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x62, 0x61, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x76, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x66, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x76, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x66, 0x72, 0x7a, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x66, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x66, 0x72, 0x7a, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x62, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x62, 0x61, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x76, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x61, 0x76, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x66, 0x72, 0x7a, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x66, 0x72, 0x7a, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x75, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x72, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x71, 0x74, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x71, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x71, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x71, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x71, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x71, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x62, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x62, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x76, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x61, 0x76, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x61, 0x73, 0x68, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x61,
	0x73, 0x68, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x74,
	0x6b, 0x6d, 0x6b, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x61, 0x73, 0x74, 0x6b, 0x6d, 0x6b, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x70, 0x6e, 0x6c, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x70, 0x6e,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x70, 0x6e, 0x6c, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x70, 0x6e,
	0x6c, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x15, 0x66, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x62, 0x75, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x61, 0x6d, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x62, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x6d,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x6d,
	0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x61, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x61, 0x6d, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x76, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x63, 0x61, 0x73, 0x68, 0x61, 0x76, 0x6c, 0x22, 0x5f, 0x0a,
	0x05, 0x49, 0x50, 0x4f, 0x51, 0x49, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x73, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x73, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x22, 0x70,
	0x0a, 0x0e, 0x49, 0x50, 0x4f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x76,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x6c,
	0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x49, 0x50, 0x4f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x0a, 0x49, 0x50, 0x4f, 0x4c,
	0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x6f, 0x74, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x76, 0x65, 0x55, 0x70, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x61, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x2a, 0x40, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x54, 0x45, 0x53,
	0x54, 0x10, 0x02, 0x2a, 0xac, 0x03, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x65, 0x77, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x6f, 0x6e, 0x65, 0x46, 0x6f,
	0x72, 0x44, 0x61, 0x79, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x05,
	0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x06, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x09, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x77, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x22,
	0x0a, 0x1e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x10, 0x0e, 0x2a, 0xbf, 0x03, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x65, 0x77, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x6f, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x79, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x08,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x77, 0x10,
	0x0a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x78,
	0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x11, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x13, 0x2a, 0xd7, 0x06, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x52,
	0x69, 0x73, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x45, 0x6e, 0x6f, 0x75,
	0x67, 0x68, 0x43, 0x61, 0x73, 0x68, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f,
	0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x49, 0x6c,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x10,
	0x05, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x49, 0x6c, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x08, 0x12,
	0x25, 0x0a, 0x21, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10,
	0x0b, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x6f, 0x75, 0x74, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x0d, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10,
	0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x10,
	0x0f, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x75, 0x73,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0xe7, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x10, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x66,
	0x12, 0x28, 0x0a, 0x24, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x67, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x68, 0x2a, 0x49,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x5f,
	0x42, 0x75, 0x79, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x65, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x09, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x03, 0x2a, 0xcb, 0x01, 0x0a,
	0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x41, 0x4b, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x46, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x46, 0x44, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x47, 0x46, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x54, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x54,
	0x43, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x46, 0x41, 0x10, 0x07, 0x2a, 0x8e, 0x01, 0x0a, 0x0e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x42, 0x4f, 0x43, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x42, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x42, 0x35, 0x54, 0x43,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x42, 0x35, 0x54, 0x4c, 0x10, 0x04, 0x2a, 0x57, 0x0a, 0x0c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x65, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x5f, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x10, 0x02, 0x2a, 0xa1, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x59, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x10, 0x04, 0x2a, 0xaf, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x73,
	0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43,
	0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x6f, 0x75,
	0x74, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0xa2, 0x01, 0x0a, 0x0c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a,
	0x92, 0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x67, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x6c, 0x67, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x6c, 0x67, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x6c, 0x67, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x6c, 0x67, 0x6f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x41, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x72, 0x63, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x72, 0x63, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x72, 0x63, 0x5f, 0x4c, 0x31, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x72, 0x63, 0x5f,
	0x4c, 0x32, 0x10, 0x02, 0x2a, 0xf4, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x5f, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x08, 0x42, 0x14, 0x5a, 0x12, 0x2e,
	0x2e, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x3b, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gmdef_proto_rawDescOnce sync.Once
	file_gmdef_proto_rawDescData = file_gmdef_proto_rawDesc
)

func file_gmdef_proto_rawDescGZIP() []byte {
	file_gmdef_proto_rawDescOnce.Do(func() {
		file_gmdef_proto_rawDescData = protoimpl.X.CompressGZIP(file_gmdef_proto_rawDescData)
	})
	return file_gmdef_proto_rawDescData
}

var file_gmdef_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_gmdef_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_gmdef_proto_goTypes = []interface{}{
	(StrategyMode)(0),                    // 0: gmsdk.StrategyMode
	(OrderStatus)(0),                     // 1: gmsdk.OrderStatus
	(ExecType)(0),                        // 2: gmsdk.ExecType
	(OrderRejectReason)(0),               // 3: gmsdk.OrderRejectReason
	(OrderSide)(0),                       // 4: gmsdk.OrderSide
	(OrderType)(0),                       // 5: gmsdk.OrderType
	(OrderDuration)(0),                   // 6: gmsdk.OrderDuration
	(OrderQualifier)(0),                  // 7: gmsdk.OrderQualifier
	(PositionSide)(0),                    // 8: gmsdk.PositionSide
	(PositionEffect)(0),                  // 9: gmsdk.PositionEffect
	(CashPositionChangeReason)(0),        // 10: gmsdk.CashPositionChangeReason
	(AccountState)(0),                    // 11: gmsdk.AccountState
	(AlgoOrderStatus)(0),                 // 12: gmsdk.AlgoOrderStatus
	(PositionSrc)(0),                     // 13: gmsdk.PositionSrc
	(SecurityType)(0),                    // 14: gmsdk.SecurityType
	(*Bar)(nil),                          // 15: gmsdk.Bar
	(*Quote)(nil),                        // 16: gmsdk.Quote
	(*Tick)(nil),                         // 17: gmsdk.Tick
	(*L2Transaction)(nil),                // 18: gmsdk.L2Transaction
	(*L2Order)(nil),                      // 19: gmsdk.L2Order
	(*L2OrderQueue)(nil),                 // 20: gmsdk.L2OrderQueue
	(*Order)(nil),                        // 21: gmsdk.Order
	(*AlgoOrder)(nil),                    // 22: gmsdk.AlgoOrder
	(*ExecRpt)(nil),                      // 23: gmsdk.ExecRpt
	(*Cash)(nil),                         // 24: gmsdk.Cash
	(*Position)(nil),                     // 25: gmsdk.Position
	(*Account)(nil),                      // 26: gmsdk.Account
	(*AccountStatus)(nil),                // 27: gmsdk.AccountStatus
	(*Parameter)(nil),                    // 28: gmsdk.Parameter
	(*Indicator)(nil),                    // 29: gmsdk.Indicator
	(*CollateralInstrument)(nil),         // 30: gmsdk.CollateralInstrument
	(*BorrowableInstrument)(nil),         // 31: gmsdk.BorrowableInstrument
	(*BorrowableInstrumentPosition)(nil), // 32: gmsdk.BorrowableInstrumentPosition
	(*CreditContract)(nil),               // 33: gmsdk.CreditContract
	(*CreditCash)(nil),                   // 34: gmsdk.CreditCash
	(*IPOQI)(nil),                        // 35: gmsdk.IPOQI
	(*IPOInstruments)(nil),               // 36: gmsdk.IPOInstruments
	(*IPOMatchNumber)(nil),               // 37: gmsdk.IPOMatchNumber
	(*IPOLotInfo)(nil),                   // 38: gmsdk.IPOLotInfo
}
var file_gmdef_proto_depIdxs = []int32{
	16, // 0: gmsdk.Tick.quotes:type_name -> gmsdk.Quote
	1,  // [1:1] is the sub-list for method output_type
	1,  // [1:1] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_gmdef_proto_init() }
func file_gmdef_proto_init() {
	if File_gmdef_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gmdef_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2OrderQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgoOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Indicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollateralInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BorrowableInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BorrowableInstrumentPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditCash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPOQI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPOInstruments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPOMatchNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gmdef_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPOLotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gmdef_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gmdef_proto_goTypes,
		DependencyIndexes: file_gmdef_proto_depIdxs,
		EnumInfos:         file_gmdef_proto_enumTypes,
		MessageInfos:      file_gmdef_proto_msgTypes,
	}.Build()
	File_gmdef_proto = out.File
	file_gmdef_proto_rawDesc = nil
	file_gmdef_proto_goTypes = nil
	file_gmdef_proto_depIdxs = nil
}
